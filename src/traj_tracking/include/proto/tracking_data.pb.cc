// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking_data.proto

#include "tracking_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tracking_5fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tracking_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControlSignal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tracking_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_State;
}  // namespace protobuf_tracking_5fdata_2eproto
namespace willand_ackermann {
class StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<State>
      _instance;
} _State_default_instance_;
class ControlSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlSignal>
      _instance;
} _ControlSignal_default_instance_;
class TrackingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrackingData>
      _instance;
} _TrackingData_default_instance_;
}  // namespace willand_ackermann
namespace protobuf_tracking_5fdata_2eproto {
static void InitDefaultsState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::willand_ackermann::_State_default_instance_;
    new (ptr) ::willand_ackermann::State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::willand_ackermann::State::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_State =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsState}, {}};

static void InitDefaultsControlSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::willand_ackermann::_ControlSignal_default_instance_;
    new (ptr) ::willand_ackermann::ControlSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::willand_ackermann::ControlSignal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlSignal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlSignal}, {}};

static void InitDefaultsTrackingData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::willand_ackermann::_TrackingData_default_instance_;
    new (ptr) ::willand_ackermann::TrackingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::willand_ackermann::TrackingData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrackingData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrackingData}, {
      &protobuf_tracking_5fdata_2eproto::scc_info_State.base,
      &protobuf_tracking_5fdata_2eproto::scc_info_ControlSignal.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_State.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlSignal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrackingData.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::State, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::State, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::State, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::State, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::State, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::State, omega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::State, kappa_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::ControlSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::ControlSignal, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::ControlSignal, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::ControlSignal, omega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::ControlSignal, kappa_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::TrackingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::TrackingData, reference_states_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::TrackingData, actual_states_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann::TrackingData, control_signals_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::willand_ackermann::State)},
  { 12, -1, sizeof(::willand_ackermann::ControlSignal)},
  { 21, -1, sizeof(::willand_ackermann::TrackingData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::willand_ackermann::_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::willand_ackermann::_ControlSignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::willand_ackermann::_TrackingData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tracking_data.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023tracking_data.proto\022\021willand_ackermann"
      "\"h\n\005State\022\021\n\ttimestamp\030\001 \001(\001\022\t\n\001x\030\002 \001(\001\022"
      "\t\n\001y\030\003 \001(\001\022\r\n\005theta\030\004 \001(\001\022\t\n\001v\030\005 \001(\001\022\r\n\005"
      "omega\030\006 \001(\001\022\r\n\005kappa\030\007 \001(\001\"K\n\rControlSig"
      "nal\022\021\n\ttimestamp\030\001 \001(\001\022\t\n\001v\030\002 \001(\001\022\r\n\005ome"
      "ga\030\003 \001(\001\022\r\n\005kappa\030\004 \001(\001\"\256\001\n\014TrackingData"
      "\0222\n\020reference_states\030\001 \003(\0132\030.willand_ack"
      "ermann.State\022/\n\ractual_states\030\002 \003(\0132\030.wi"
      "lland_ackermann.State\0229\n\017control_signals"
      "\030\003 \003(\0132 .willand_ackermann.ControlSignal"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracking_data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tracking_5fdata_2eproto
namespace willand_ackermann {

// ===================================================================

void State::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kTimestampFieldNumber;
const int State::kXFieldNumber;
const int State::kYFieldNumber;
const int State::kThetaFieldNumber;
const int State::kVFieldNumber;
const int State::kOmegaFieldNumber;
const int State::kKappaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tracking_5fdata_2eproto::scc_info_State.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:willand_ackermann.State)
}
State::State(const State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&kappa_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(kappa_));
  // @@protoc_insertion_point(copy_constructor:willand_ackermann.State)
}

void State::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(kappa_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:willand_ackermann.State)
  SharedDtor();
}

void State::SharedDtor() {
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* State::descriptor() {
  ::protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const State& State::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tracking_5fdata_2eproto::scc_info_State.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:willand_ackermann.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(kappa_));
  _internal_metadata_.Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:willand_ackermann.State)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double omega = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kappa = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:willand_ackermann.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:willand_ackermann.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:willand_ackermann.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // double theta = 4;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // double v = 5;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->v(), output);
  }

  // double omega = 6;
  if (this->omega() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->omega(), output);
  }

  // double kappa = 7;
  if (this->kappa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->kappa(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:willand_ackermann.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:willand_ackermann.State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // double theta = 4;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // double v = 5;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->v(), target);
  }

  // double omega = 6;
  if (this->omega() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->omega(), target);
  }

  // double kappa = 7;
  if (this->kappa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->kappa(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:willand_ackermann.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:willand_ackermann.State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double theta = 4;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  // double v = 5;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // double omega = 6;
  if (this->omega() != 0) {
    total_size += 1 + 8;
  }

  // double kappa = 7;
  if (this->kappa() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:willand_ackermann.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:willand_ackermann.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:willand_ackermann.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:willand_ackermann.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.omega() != 0) {
    set_omega(from.omega());
  }
  if (from.kappa() != 0) {
    set_kappa(from.kappa());
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:willand_ackermann.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:willand_ackermann.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(theta_, other->theta_);
  swap(v_, other->v_);
  swap(omega_, other->omega_);
  swap(kappa_, other->kappa_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlSignal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlSignal::kTimestampFieldNumber;
const int ControlSignal::kVFieldNumber;
const int ControlSignal::kOmegaFieldNumber;
const int ControlSignal::kKappaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlSignal::ControlSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tracking_5fdata_2eproto::scc_info_ControlSignal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:willand_ackermann.ControlSignal)
}
ControlSignal::ControlSignal(const ControlSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&kappa_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(kappa_));
  // @@protoc_insertion_point(copy_constructor:willand_ackermann.ControlSignal)
}

void ControlSignal::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(kappa_));
}

ControlSignal::~ControlSignal() {
  // @@protoc_insertion_point(destructor:willand_ackermann.ControlSignal)
  SharedDtor();
}

void ControlSignal::SharedDtor() {
}

void ControlSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlSignal::descriptor() {
  ::protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlSignal& ControlSignal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tracking_5fdata_2eproto::scc_info_ControlSignal.base);
  return *internal_default_instance();
}


void ControlSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:willand_ackermann.ControlSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(kappa_));
  _internal_metadata_.Clear();
}

bool ControlSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:willand_ackermann.ControlSignal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double omega = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kappa = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:willand_ackermann.ControlSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:willand_ackermann.ControlSignal)
  return false;
#undef DO_
}

void ControlSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:willand_ackermann.ControlSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // double v = 2;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // double omega = 3;
  if (this->omega() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->omega(), output);
  }

  // double kappa = 4;
  if (this->kappa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->kappa(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:willand_ackermann.ControlSignal)
}

::google::protobuf::uint8* ControlSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:willand_ackermann.ControlSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // double v = 2;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // double omega = 3;
  if (this->omega() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->omega(), target);
  }

  // double kappa = 4;
  if (this->kappa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->kappa(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:willand_ackermann.ControlSignal)
  return target;
}

size_t ControlSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:willand_ackermann.ControlSignal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // double v = 2;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // double omega = 3;
  if (this->omega() != 0) {
    total_size += 1 + 8;
  }

  // double kappa = 4;
  if (this->kappa() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:willand_ackermann.ControlSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlSignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:willand_ackermann.ControlSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:willand_ackermann.ControlSignal)
    MergeFrom(*source);
  }
}

void ControlSignal::MergeFrom(const ControlSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:willand_ackermann.ControlSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.omega() != 0) {
    set_omega(from.omega());
  }
  if (from.kappa() != 0) {
    set_kappa(from.kappa());
  }
}

void ControlSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:willand_ackermann.ControlSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlSignal::CopyFrom(const ControlSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:willand_ackermann.ControlSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSignal::IsInitialized() const {
  return true;
}

void ControlSignal::Swap(ControlSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlSignal::InternalSwap(ControlSignal* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(v_, other->v_);
  swap(omega_, other->omega_);
  swap(kappa_, other->kappa_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlSignal::GetMetadata() const {
  protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrackingData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackingData::kReferenceStatesFieldNumber;
const int TrackingData::kActualStatesFieldNumber;
const int TrackingData::kControlSignalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackingData::TrackingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tracking_5fdata_2eproto::scc_info_TrackingData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:willand_ackermann.TrackingData)
}
TrackingData::TrackingData(const TrackingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_states_(from.reference_states_),
      actual_states_(from.actual_states_),
      control_signals_(from.control_signals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:willand_ackermann.TrackingData)
}

void TrackingData::SharedCtor() {
}

TrackingData::~TrackingData() {
  // @@protoc_insertion_point(destructor:willand_ackermann.TrackingData)
  SharedDtor();
}

void TrackingData::SharedDtor() {
}

void TrackingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrackingData::descriptor() {
  ::protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackingData& TrackingData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tracking_5fdata_2eproto::scc_info_TrackingData.base);
  return *internal_default_instance();
}


void TrackingData::Clear() {
// @@protoc_insertion_point(message_clear_start:willand_ackermann.TrackingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_states_.Clear();
  actual_states_.Clear();
  control_signals_.Clear();
  _internal_metadata_.Clear();
}

bool TrackingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:willand_ackermann.TrackingData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .willand_ackermann.State reference_states = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reference_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .willand_ackermann.State actual_states = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actual_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .willand_ackermann.ControlSignal control_signals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_control_signals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:willand_ackermann.TrackingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:willand_ackermann.TrackingData)
  return false;
#undef DO_
}

void TrackingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:willand_ackermann.TrackingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .willand_ackermann.State reference_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->reference_states(static_cast<int>(i)),
      output);
  }

  // repeated .willand_ackermann.State actual_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actual_states_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->actual_states(static_cast<int>(i)),
      output);
  }

  // repeated .willand_ackermann.ControlSignal control_signals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->control_signals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->control_signals(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:willand_ackermann.TrackingData)
}

::google::protobuf::uint8* TrackingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:willand_ackermann.TrackingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .willand_ackermann.State reference_states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->reference_states(static_cast<int>(i)), deterministic, target);
  }

  // repeated .willand_ackermann.State actual_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actual_states_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->actual_states(static_cast<int>(i)), deterministic, target);
  }

  // repeated .willand_ackermann.ControlSignal control_signals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->control_signals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->control_signals(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:willand_ackermann.TrackingData)
  return target;
}

size_t TrackingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:willand_ackermann.TrackingData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .willand_ackermann.State reference_states = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->reference_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reference_states(static_cast<int>(i)));
    }
  }

  // repeated .willand_ackermann.State actual_states = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->actual_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actual_states(static_cast<int>(i)));
    }
  }

  // repeated .willand_ackermann.ControlSignal control_signals = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->control_signals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->control_signals(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:willand_ackermann.TrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:willand_ackermann.TrackingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:willand_ackermann.TrackingData)
    MergeFrom(*source);
  }
}

void TrackingData::MergeFrom(const TrackingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:willand_ackermann.TrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_states_.MergeFrom(from.reference_states_);
  actual_states_.MergeFrom(from.actual_states_);
  control_signals_.MergeFrom(from.control_signals_);
}

void TrackingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:willand_ackermann.TrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingData::CopyFrom(const TrackingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:willand_ackermann.TrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingData::IsInitialized() const {
  return true;
}

void TrackingData::Swap(TrackingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackingData::InternalSwap(TrackingData* other) {
  using std::swap;
  CastToBase(&reference_states_)->InternalSwap(CastToBase(&other->reference_states_));
  CastToBase(&actual_states_)->InternalSwap(CastToBase(&other->actual_states_));
  CastToBase(&control_signals_)->InternalSwap(CastToBase(&other->control_signals_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrackingData::GetMetadata() const {
  protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace willand_ackermann
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::willand_ackermann::State* Arena::CreateMaybeMessage< ::willand_ackermann::State >(Arena* arena) {
  return Arena::CreateInternal< ::willand_ackermann::State >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::willand_ackermann::ControlSignal* Arena::CreateMaybeMessage< ::willand_ackermann::ControlSignal >(Arena* arena) {
  return Arena::CreateInternal< ::willand_ackermann::ControlSignal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::willand_ackermann::TrackingData* Arena::CreateMaybeMessage< ::willand_ackermann::TrackingData >(Arena* arena) {
  return Arena::CreateInternal< ::willand_ackermann::TrackingData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
