// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking_data.proto

#ifndef PROTOBUF_INCLUDED_tracking_5fdata_2eproto
#define PROTOBUF_INCLUDED_tracking_5fdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tracking_5fdata_2eproto 

namespace protobuf_tracking_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tracking_5fdata_2eproto
namespace willand_ackermann {
class ControlSignal;
class ControlSignalDefaultTypeInternal;
extern ControlSignalDefaultTypeInternal _ControlSignal_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class TrackingData;
class TrackingDataDefaultTypeInternal;
extern TrackingDataDefaultTypeInternal _TrackingData_default_instance_;
}  // namespace willand_ackermann
namespace google {
namespace protobuf {
template<> ::willand_ackermann::ControlSignal* Arena::CreateMaybeMessage<::willand_ackermann::ControlSignal>(Arena*);
template<> ::willand_ackermann::State* Arena::CreateMaybeMessage<::willand_ackermann::State>(Arena*);
template<> ::willand_ackermann::TrackingData* Arena::CreateMaybeMessage<::willand_ackermann::TrackingData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace willand_ackermann {

// ===================================================================

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(State* other);
  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(NULL);
  }

  State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // double theta = 4;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  double theta() const;
  void set_theta(double value);

  // double v = 5;
  void clear_v();
  static const int kVFieldNumber = 5;
  double v() const;
  void set_v(double value);

  // double omega = 6;
  void clear_omega();
  static const int kOmegaFieldNumber = 6;
  double omega() const;
  void set_omega(double value);

  // double kappa = 7;
  void clear_kappa();
  static const int kKappaFieldNumber = 7;
  double kappa() const;
  void set_kappa(double value);

  // @@protoc_insertion_point(class_scope:willand_ackermann.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double timestamp_;
  double x_;
  double y_;
  double theta_;
  double v_;
  double omega_;
  double kappa_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann.ControlSignal) */ {
 public:
  ControlSignal();
  virtual ~ControlSignal();

  ControlSignal(const ControlSignal& from);

  inline ControlSignal& operator=(const ControlSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlSignal(ControlSignal&& from) noexcept
    : ControlSignal() {
    *this = ::std::move(from);
  }

  inline ControlSignal& operator=(ControlSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlSignal* internal_default_instance() {
    return reinterpret_cast<const ControlSignal*>(
               &_ControlSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ControlSignal* other);
  friend void swap(ControlSignal& a, ControlSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlSignal* New() const final {
    return CreateMaybeMessage<ControlSignal>(NULL);
  }

  ControlSignal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlSignal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlSignal& from);
  void MergeFrom(const ControlSignal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // double v = 2;
  void clear_v();
  static const int kVFieldNumber = 2;
  double v() const;
  void set_v(double value);

  // double omega = 3;
  void clear_omega();
  static const int kOmegaFieldNumber = 3;
  double omega() const;
  void set_omega(double value);

  // double kappa = 4;
  void clear_kappa();
  static const int kKappaFieldNumber = 4;
  double kappa() const;
  void set_kappa(double value);

  // @@protoc_insertion_point(class_scope:willand_ackermann.ControlSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double timestamp_;
  double v_;
  double omega_;
  double kappa_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann.TrackingData) */ {
 public:
  TrackingData();
  virtual ~TrackingData();

  TrackingData(const TrackingData& from);

  inline TrackingData& operator=(const TrackingData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackingData(TrackingData&& from) noexcept
    : TrackingData() {
    *this = ::std::move(from);
  }

  inline TrackingData& operator=(TrackingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingData* internal_default_instance() {
    return reinterpret_cast<const TrackingData*>(
               &_TrackingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TrackingData* other);
  friend void swap(TrackingData& a, TrackingData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackingData* New() const final {
    return CreateMaybeMessage<TrackingData>(NULL);
  }

  TrackingData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackingData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackingData& from);
  void MergeFrom(const TrackingData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .willand_ackermann.State reference_states = 1;
  int reference_states_size() const;
  void clear_reference_states();
  static const int kReferenceStatesFieldNumber = 1;
  ::willand_ackermann::State* mutable_reference_states(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State >*
      mutable_reference_states();
  const ::willand_ackermann::State& reference_states(int index) const;
  ::willand_ackermann::State* add_reference_states();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State >&
      reference_states() const;

  // repeated .willand_ackermann.State actual_states = 2;
  int actual_states_size() const;
  void clear_actual_states();
  static const int kActualStatesFieldNumber = 2;
  ::willand_ackermann::State* mutable_actual_states(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State >*
      mutable_actual_states();
  const ::willand_ackermann::State& actual_states(int index) const;
  ::willand_ackermann::State* add_actual_states();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State >&
      actual_states() const;

  // repeated .willand_ackermann.ControlSignal control_signals = 3;
  int control_signals_size() const;
  void clear_control_signals();
  static const int kControlSignalsFieldNumber = 3;
  ::willand_ackermann::ControlSignal* mutable_control_signals(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann::ControlSignal >*
      mutable_control_signals();
  const ::willand_ackermann::ControlSignal& control_signals(int index) const;
  ::willand_ackermann::ControlSignal* add_control_signals();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann::ControlSignal >&
      control_signals() const;

  // @@protoc_insertion_point(class_scope:willand_ackermann.TrackingData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State > reference_states_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State > actual_states_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann::ControlSignal > control_signals_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// double timestamp = 1;
inline void State::clear_timestamp() {
  timestamp_ = 0;
}
inline double State::timestamp() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.State.timestamp)
  return timestamp_;
}
inline void State::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.State.timestamp)
}

// double x = 2;
inline void State::clear_x() {
  x_ = 0;
}
inline double State::x() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.State.x)
  return x_;
}
inline void State::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.State.x)
}

// double y = 3;
inline void State::clear_y() {
  y_ = 0;
}
inline double State::y() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.State.y)
  return y_;
}
inline void State::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.State.y)
}

// double theta = 4;
inline void State::clear_theta() {
  theta_ = 0;
}
inline double State::theta() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.State.theta)
  return theta_;
}
inline void State::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.State.theta)
}

// double v = 5;
inline void State::clear_v() {
  v_ = 0;
}
inline double State::v() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.State.v)
  return v_;
}
inline void State::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.State.v)
}

// double omega = 6;
inline void State::clear_omega() {
  omega_ = 0;
}
inline double State::omega() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.State.omega)
  return omega_;
}
inline void State::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.State.omega)
}

// double kappa = 7;
inline void State::clear_kappa() {
  kappa_ = 0;
}
inline double State::kappa() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.State.kappa)
  return kappa_;
}
inline void State::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.State.kappa)
}

// -------------------------------------------------------------------

// ControlSignal

// double timestamp = 1;
inline void ControlSignal::clear_timestamp() {
  timestamp_ = 0;
}
inline double ControlSignal::timestamp() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.ControlSignal.timestamp)
  return timestamp_;
}
inline void ControlSignal::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.ControlSignal.timestamp)
}

// double v = 2;
inline void ControlSignal::clear_v() {
  v_ = 0;
}
inline double ControlSignal::v() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.ControlSignal.v)
  return v_;
}
inline void ControlSignal::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.ControlSignal.v)
}

// double omega = 3;
inline void ControlSignal::clear_omega() {
  omega_ = 0;
}
inline double ControlSignal::omega() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.ControlSignal.omega)
  return omega_;
}
inline void ControlSignal::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.ControlSignal.omega)
}

// double kappa = 4;
inline void ControlSignal::clear_kappa() {
  kappa_ = 0;
}
inline double ControlSignal::kappa() const {
  // @@protoc_insertion_point(field_get:willand_ackermann.ControlSignal.kappa)
  return kappa_;
}
inline void ControlSignal::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann.ControlSignal.kappa)
}

// -------------------------------------------------------------------

// TrackingData

// repeated .willand_ackermann.State reference_states = 1;
inline int TrackingData::reference_states_size() const {
  return reference_states_.size();
}
inline void TrackingData::clear_reference_states() {
  reference_states_.Clear();
}
inline ::willand_ackermann::State* TrackingData::mutable_reference_states(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann.TrackingData.reference_states)
  return reference_states_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State >*
TrackingData::mutable_reference_states() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann.TrackingData.reference_states)
  return &reference_states_;
}
inline const ::willand_ackermann::State& TrackingData::reference_states(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann.TrackingData.reference_states)
  return reference_states_.Get(index);
}
inline ::willand_ackermann::State* TrackingData::add_reference_states() {
  // @@protoc_insertion_point(field_add:willand_ackermann.TrackingData.reference_states)
  return reference_states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State >&
TrackingData::reference_states() const {
  // @@protoc_insertion_point(field_list:willand_ackermann.TrackingData.reference_states)
  return reference_states_;
}

// repeated .willand_ackermann.State actual_states = 2;
inline int TrackingData::actual_states_size() const {
  return actual_states_.size();
}
inline void TrackingData::clear_actual_states() {
  actual_states_.Clear();
}
inline ::willand_ackermann::State* TrackingData::mutable_actual_states(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann.TrackingData.actual_states)
  return actual_states_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State >*
TrackingData::mutable_actual_states() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann.TrackingData.actual_states)
  return &actual_states_;
}
inline const ::willand_ackermann::State& TrackingData::actual_states(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann.TrackingData.actual_states)
  return actual_states_.Get(index);
}
inline ::willand_ackermann::State* TrackingData::add_actual_states() {
  // @@protoc_insertion_point(field_add:willand_ackermann.TrackingData.actual_states)
  return actual_states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann::State >&
TrackingData::actual_states() const {
  // @@protoc_insertion_point(field_list:willand_ackermann.TrackingData.actual_states)
  return actual_states_;
}

// repeated .willand_ackermann.ControlSignal control_signals = 3;
inline int TrackingData::control_signals_size() const {
  return control_signals_.size();
}
inline void TrackingData::clear_control_signals() {
  control_signals_.Clear();
}
inline ::willand_ackermann::ControlSignal* TrackingData::mutable_control_signals(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann.TrackingData.control_signals)
  return control_signals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann::ControlSignal >*
TrackingData::mutable_control_signals() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann.TrackingData.control_signals)
  return &control_signals_;
}
inline const ::willand_ackermann::ControlSignal& TrackingData::control_signals(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann.TrackingData.control_signals)
  return control_signals_.Get(index);
}
inline ::willand_ackermann::ControlSignal* TrackingData::add_control_signals() {
  // @@protoc_insertion_point(field_add:willand_ackermann.TrackingData.control_signals)
  return control_signals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann::ControlSignal >&
TrackingData::control_signals() const {
  // @@protoc_insertion_point(field_list:willand_ackermann.TrackingData.control_signals)
  return control_signals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace willand_ackermann

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tracking_5fdata_2eproto
