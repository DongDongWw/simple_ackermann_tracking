// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking_data.proto

#include "tracking_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_tracking_5fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tracking_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControlType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tracking_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ParamMPC;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_tracking_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StateType;
}  // namespace protobuf_tracking_5fdata_2eproto
namespace willand_ackermann_proto {
class StateTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateType>
      _instance;
} _StateType_default_instance_;
class ControlTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlType>
      _instance;
} _ControlType_default_instance_;
class ParamMPCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParamMPC>
      _instance;
} _ParamMPC_default_instance_;
class TrackingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrackingData>
      _instance;
} _TrackingData_default_instance_;
}  // namespace willand_ackermann_proto
namespace protobuf_tracking_5fdata_2eproto {
static void InitDefaultsStateType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::willand_ackermann_proto::_StateType_default_instance_;
    new (ptr) ::willand_ackermann_proto::StateType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::willand_ackermann_proto::StateType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StateType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStateType}, {}};

static void InitDefaultsControlType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::willand_ackermann_proto::_ControlType_default_instance_;
    new (ptr) ::willand_ackermann_proto::ControlType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::willand_ackermann_proto::ControlType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlType}, {}};

static void InitDefaultsParamMPC() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::willand_ackermann_proto::_ParamMPC_default_instance_;
    new (ptr) ::willand_ackermann_proto::ParamMPC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::willand_ackermann_proto::ParamMPC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ParamMPC =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParamMPC}, {}};

static void InitDefaultsTrackingData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::willand_ackermann_proto::_TrackingData_default_instance_;
    new (ptr) ::willand_ackermann_proto::TrackingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::willand_ackermann_proto::TrackingData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TrackingData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTrackingData}, {
      &protobuf_tracking_5fdata_2eproto::scc_info_ParamMPC.base,
      &protobuf_tracking_5fdata_2eproto::scc_info_StateType.base,
      &protobuf_tracking_5fdata_2eproto::scc_info_ControlType.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StateType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParamMPC.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrackingData.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::StateType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::StateType, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::StateType, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::StateType, theta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ControlType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ControlType, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ControlType, omega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ControlType, steer_angle_front_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ControlType, steer_angle_front_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ControlType, steer_angle_back_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ControlType, steer_angle_back_right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, state_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, input_dim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, min_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, max_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, min_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, max_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, steer_angle_rate_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, track_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::ParamMPC, wheel_base_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::TrackingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::TrackingData, mpc_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::TrackingData, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::TrackingData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::TrackingData, refer_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::TrackingData, actual_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::willand_ackermann_proto::TrackingData, ctrl_cmd_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::willand_ackermann_proto::StateType)},
  { 8, -1, sizeof(::willand_ackermann_proto::ControlType)},
  { 19, -1, sizeof(::willand_ackermann_proto::ParamMPC)},
  { 35, -1, sizeof(::willand_ackermann_proto::TrackingData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::willand_ackermann_proto::_StateType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::willand_ackermann_proto::_ControlType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::willand_ackermann_proto::_ParamMPC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::willand_ackermann_proto::_TrackingData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "tracking_data.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023tracking_data.proto\022\027willand_ackermann"
      "_proto\"0\n\tStateType\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001("
      "\001\022\r\n\005theta\030\003 \001(\001\"\247\001\n\013ControlType\022\t\n\001v\030\001 "
      "\001(\001\022\r\n\005omega\030\002 \001(\001\022\036\n\026steer_angle_front_"
      "left\030\003 \001(\001\022\037\n\027steer_angle_front_right\030\004 "
      "\001(\001\022\035\n\025steer_angle_back_left\030\005 \001(\001\022\036\n\026st"
      "eer_angle_back_right\030\006 \001(\001\"\340\001\n\010ParamMPC\022"
      "\017\n\007horizon\030\001 \001(\r\022\020\n\010interval\030\002 \001(\001\022\021\n\tst"
      "ate_dim\030\003 \001(\r\022\021\n\tinput_dim\030\004 \001(\r\022\017\n\007min_"
      "vel\030\005 \001(\001\022\017\n\007max_vel\030\006 \001(\001\022\017\n\007min_acc\030\007 "
      "\001(\001\022\017\n\007max_acc\030\010 \001(\001\022\036\n\026steer_angle_rate"
      "_limit\030\t \001(\001\022\023\n\013track_width\030\n \001(\001\022\022\n\nwhe"
      "el_base\030\013 \001(\001\"\222\002\n\014TrackingData\0224\n\tmpc_pa"
      "ram\030\001 \001(\0132!.willand_ackermann_proto.Para"
      "mMPC\022\016\n\006length\030\002 \001(\r\022\021\n\ttimestamp\030\003 \003(\r\022"
      "7\n\013refer_state\030\004 \003(\0132\".willand_ackermann"
      "_proto.StateType\0228\n\014actual_state\030\005 \003(\0132\""
      ".willand_ackermann_proto.StateType\0226\n\010ct"
      "rl_cmd\030\006 \003(\0132$.willand_ackermann_proto.C"
      "ontrolTypeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 778);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracking_data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tracking_5fdata_2eproto
namespace willand_ackermann_proto {

// ===================================================================

void StateType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateType::kXFieldNumber;
const int StateType::kYFieldNumber;
const int StateType::kThetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateType::StateType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tracking_5fdata_2eproto::scc_info_StateType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:willand_ackermann_proto.StateType)
}
StateType::StateType(const StateType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:willand_ackermann_proto.StateType)
}

void StateType::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
}

StateType::~StateType() {
  // @@protoc_insertion_point(destructor:willand_ackermann_proto.StateType)
  SharedDtor();
}

void StateType::SharedDtor() {
}

void StateType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StateType::descriptor() {
  ::protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StateType& StateType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tracking_5fdata_2eproto::scc_info_StateType.base);
  return *internal_default_instance();
}


void StateType::Clear() {
// @@protoc_insertion_point(message_clear_start:willand_ackermann_proto.StateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  _internal_metadata_.Clear();
}

bool StateType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:willand_ackermann_proto.StateType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:willand_ackermann_proto.StateType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:willand_ackermann_proto.StateType)
  return false;
#undef DO_
}

void StateType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:willand_ackermann_proto.StateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double theta = 3;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:willand_ackermann_proto.StateType)
}

::google::protobuf::uint8* StateType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:willand_ackermann_proto.StateType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double theta = 3;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:willand_ackermann_proto.StateType)
  return target;
}

size_t StateType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:willand_ackermann_proto.StateType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double theta = 3;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:willand_ackermann_proto.StateType)
  GOOGLE_DCHECK_NE(&from, this);
  const StateType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:willand_ackermann_proto.StateType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:willand_ackermann_proto.StateType)
    MergeFrom(*source);
  }
}

void StateType::MergeFrom(const StateType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:willand_ackermann_proto.StateType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
}

void StateType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:willand_ackermann_proto.StateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateType::CopyFrom(const StateType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:willand_ackermann_proto.StateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateType::IsInitialized() const {
  return true;
}

void StateType::Swap(StateType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateType::InternalSwap(StateType* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(theta_, other->theta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StateType::GetMetadata() const {
  protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlType::kVFieldNumber;
const int ControlType::kOmegaFieldNumber;
const int ControlType::kSteerAngleFrontLeftFieldNumber;
const int ControlType::kSteerAngleFrontRightFieldNumber;
const int ControlType::kSteerAngleBackLeftFieldNumber;
const int ControlType::kSteerAngleBackRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlType::ControlType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tracking_5fdata_2eproto::scc_info_ControlType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:willand_ackermann_proto.ControlType)
}
ControlType::ControlType(const ControlType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_angle_back_right_) -
    reinterpret_cast<char*>(&v_)) + sizeof(steer_angle_back_right_));
  // @@protoc_insertion_point(copy_constructor:willand_ackermann_proto.ControlType)
}

void ControlType::SharedCtor() {
  ::memset(&v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_back_right_) -
      reinterpret_cast<char*>(&v_)) + sizeof(steer_angle_back_right_));
}

ControlType::~ControlType() {
  // @@protoc_insertion_point(destructor:willand_ackermann_proto.ControlType)
  SharedDtor();
}

void ControlType::SharedDtor() {
}

void ControlType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlType::descriptor() {
  ::protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlType& ControlType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tracking_5fdata_2eproto::scc_info_ControlType.base);
  return *internal_default_instance();
}


void ControlType::Clear() {
// @@protoc_insertion_point(message_clear_start:willand_ackermann_proto.ControlType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_back_right_) -
      reinterpret_cast<char*>(&v_)) + sizeof(steer_angle_back_right_));
  _internal_metadata_.Clear();
}

bool ControlType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:willand_ackermann_proto.ControlType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double v = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double omega = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_front_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_front_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_front_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_front_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_back_left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_back_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_back_right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_back_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:willand_ackermann_proto.ControlType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:willand_ackermann_proto.ControlType)
  return false;
#undef DO_
}

void ControlType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:willand_ackermann_proto.ControlType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double v = 1;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->v(), output);
  }

  // double omega = 2;
  if (this->omega() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->omega(), output);
  }

  // double steer_angle_front_left = 3;
  if (this->steer_angle_front_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->steer_angle_front_left(), output);
  }

  // double steer_angle_front_right = 4;
  if (this->steer_angle_front_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->steer_angle_front_right(), output);
  }

  // double steer_angle_back_left = 5;
  if (this->steer_angle_back_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->steer_angle_back_left(), output);
  }

  // double steer_angle_back_right = 6;
  if (this->steer_angle_back_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steer_angle_back_right(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:willand_ackermann_proto.ControlType)
}

::google::protobuf::uint8* ControlType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:willand_ackermann_proto.ControlType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double v = 1;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->v(), target);
  }

  // double omega = 2;
  if (this->omega() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->omega(), target);
  }

  // double steer_angle_front_left = 3;
  if (this->steer_angle_front_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->steer_angle_front_left(), target);
  }

  // double steer_angle_front_right = 4;
  if (this->steer_angle_front_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->steer_angle_front_right(), target);
  }

  // double steer_angle_back_left = 5;
  if (this->steer_angle_back_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->steer_angle_back_left(), target);
  }

  // double steer_angle_back_right = 6;
  if (this->steer_angle_back_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steer_angle_back_right(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:willand_ackermann_proto.ControlType)
  return target;
}

size_t ControlType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:willand_ackermann_proto.ControlType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double v = 1;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // double omega = 2;
  if (this->omega() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_front_left = 3;
  if (this->steer_angle_front_left() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_front_right = 4;
  if (this->steer_angle_front_right() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_back_left = 5;
  if (this->steer_angle_back_left() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_back_right = 6;
  if (this->steer_angle_back_right() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:willand_ackermann_proto.ControlType)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:willand_ackermann_proto.ControlType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:willand_ackermann_proto.ControlType)
    MergeFrom(*source);
  }
}

void ControlType::MergeFrom(const ControlType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:willand_ackermann_proto.ControlType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.omega() != 0) {
    set_omega(from.omega());
  }
  if (from.steer_angle_front_left() != 0) {
    set_steer_angle_front_left(from.steer_angle_front_left());
  }
  if (from.steer_angle_front_right() != 0) {
    set_steer_angle_front_right(from.steer_angle_front_right());
  }
  if (from.steer_angle_back_left() != 0) {
    set_steer_angle_back_left(from.steer_angle_back_left());
  }
  if (from.steer_angle_back_right() != 0) {
    set_steer_angle_back_right(from.steer_angle_back_right());
  }
}

void ControlType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:willand_ackermann_proto.ControlType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlType::CopyFrom(const ControlType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:willand_ackermann_proto.ControlType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlType::IsInitialized() const {
  return true;
}

void ControlType::Swap(ControlType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlType::InternalSwap(ControlType* other) {
  using std::swap;
  swap(v_, other->v_);
  swap(omega_, other->omega_);
  swap(steer_angle_front_left_, other->steer_angle_front_left_);
  swap(steer_angle_front_right_, other->steer_angle_front_right_);
  swap(steer_angle_back_left_, other->steer_angle_back_left_);
  swap(steer_angle_back_right_, other->steer_angle_back_right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlType::GetMetadata() const {
  protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParamMPC::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamMPC::kHorizonFieldNumber;
const int ParamMPC::kIntervalFieldNumber;
const int ParamMPC::kStateDimFieldNumber;
const int ParamMPC::kInputDimFieldNumber;
const int ParamMPC::kMinVelFieldNumber;
const int ParamMPC::kMaxVelFieldNumber;
const int ParamMPC::kMinAccFieldNumber;
const int ParamMPC::kMaxAccFieldNumber;
const int ParamMPC::kSteerAngleRateLimitFieldNumber;
const int ParamMPC::kTrackWidthFieldNumber;
const int ParamMPC::kWheelBaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamMPC::ParamMPC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tracking_5fdata_2eproto::scc_info_ParamMPC.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:willand_ackermann_proto.ParamMPC)
}
ParamMPC::ParamMPC(const ParamMPC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&interval_, &from.interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_dim_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(input_dim_));
  // @@protoc_insertion_point(copy_constructor:willand_ackermann_proto.ParamMPC)
}

void ParamMPC::SharedCtor() {
  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_dim_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(input_dim_));
}

ParamMPC::~ParamMPC() {
  // @@protoc_insertion_point(destructor:willand_ackermann_proto.ParamMPC)
  SharedDtor();
}

void ParamMPC::SharedDtor() {
}

void ParamMPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParamMPC::descriptor() {
  ::protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParamMPC& ParamMPC::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tracking_5fdata_2eproto::scc_info_ParamMPC.base);
  return *internal_default_instance();
}


void ParamMPC::Clear() {
// @@protoc_insertion_point(message_clear_start:willand_ackermann_proto.ParamMPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_dim_) -
      reinterpret_cast<char*>(&interval_)) + sizeof(input_dim_));
  _internal_metadata_.Clear();
}

bool ParamMPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:willand_ackermann_proto.ParamMPC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 horizon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state_dim = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 input_dim = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_dim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_vel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_vel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_acc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_acc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer_angle_rate_limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_rate_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double track_width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &track_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_base = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:willand_ackermann_proto.ParamMPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:willand_ackermann_proto.ParamMPC)
  return false;
#undef DO_
}

void ParamMPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:willand_ackermann_proto.ParamMPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 horizon = 1;
  if (this->horizon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->horizon(), output);
  }

  // double interval = 2;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->interval(), output);
  }

  // uint32 state_dim = 3;
  if (this->state_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state_dim(), output);
  }

  // uint32 input_dim = 4;
  if (this->input_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->input_dim(), output);
  }

  // double min_vel = 5;
  if (this->min_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_vel(), output);
  }

  // double max_vel = 6;
  if (this->max_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->max_vel(), output);
  }

  // double min_acc = 7;
  if (this->min_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->min_acc(), output);
  }

  // double max_acc = 8;
  if (this->max_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->max_acc(), output);
  }

  // double steer_angle_rate_limit = 9;
  if (this->steer_angle_rate_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->steer_angle_rate_limit(), output);
  }

  // double track_width = 10;
  if (this->track_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->track_width(), output);
  }

  // double wheel_base = 11;
  if (this->wheel_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->wheel_base(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:willand_ackermann_proto.ParamMPC)
}

::google::protobuf::uint8* ParamMPC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:willand_ackermann_proto.ParamMPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 horizon = 1;
  if (this->horizon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->horizon(), target);
  }

  // double interval = 2;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->interval(), target);
  }

  // uint32 state_dim = 3;
  if (this->state_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state_dim(), target);
  }

  // uint32 input_dim = 4;
  if (this->input_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->input_dim(), target);
  }

  // double min_vel = 5;
  if (this->min_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_vel(), target);
  }

  // double max_vel = 6;
  if (this->max_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->max_vel(), target);
  }

  // double min_acc = 7;
  if (this->min_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->min_acc(), target);
  }

  // double max_acc = 8;
  if (this->max_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->max_acc(), target);
  }

  // double steer_angle_rate_limit = 9;
  if (this->steer_angle_rate_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->steer_angle_rate_limit(), target);
  }

  // double track_width = 10;
  if (this->track_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->track_width(), target);
  }

  // double wheel_base = 11;
  if (this->wheel_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->wheel_base(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:willand_ackermann_proto.ParamMPC)
  return target;
}

size_t ParamMPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:willand_ackermann_proto.ParamMPC)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double interval = 2;
  if (this->interval() != 0) {
    total_size += 1 + 8;
  }

  // uint32 horizon = 1;
  if (this->horizon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->horizon());
  }

  // uint32 state_dim = 3;
  if (this->state_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state_dim());
  }

  // double min_vel = 5;
  if (this->min_vel() != 0) {
    total_size += 1 + 8;
  }

  // double max_vel = 6;
  if (this->max_vel() != 0) {
    total_size += 1 + 8;
  }

  // double min_acc = 7;
  if (this->min_acc() != 0) {
    total_size += 1 + 8;
  }

  // double max_acc = 8;
  if (this->max_acc() != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_rate_limit = 9;
  if (this->steer_angle_rate_limit() != 0) {
    total_size += 1 + 8;
  }

  // double track_width = 10;
  if (this->track_width() != 0) {
    total_size += 1 + 8;
  }

  // double wheel_base = 11;
  if (this->wheel_base() != 0) {
    total_size += 1 + 8;
  }

  // uint32 input_dim = 4;
  if (this->input_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_dim());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParamMPC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:willand_ackermann_proto.ParamMPC)
  GOOGLE_DCHECK_NE(&from, this);
  const ParamMPC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamMPC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:willand_ackermann_proto.ParamMPC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:willand_ackermann_proto.ParamMPC)
    MergeFrom(*source);
  }
}

void ParamMPC::MergeFrom(const ParamMPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:willand_ackermann_proto.ParamMPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.interval() != 0) {
    set_interval(from.interval());
  }
  if (from.horizon() != 0) {
    set_horizon(from.horizon());
  }
  if (from.state_dim() != 0) {
    set_state_dim(from.state_dim());
  }
  if (from.min_vel() != 0) {
    set_min_vel(from.min_vel());
  }
  if (from.max_vel() != 0) {
    set_max_vel(from.max_vel());
  }
  if (from.min_acc() != 0) {
    set_min_acc(from.min_acc());
  }
  if (from.max_acc() != 0) {
    set_max_acc(from.max_acc());
  }
  if (from.steer_angle_rate_limit() != 0) {
    set_steer_angle_rate_limit(from.steer_angle_rate_limit());
  }
  if (from.track_width() != 0) {
    set_track_width(from.track_width());
  }
  if (from.wheel_base() != 0) {
    set_wheel_base(from.wheel_base());
  }
  if (from.input_dim() != 0) {
    set_input_dim(from.input_dim());
  }
}

void ParamMPC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:willand_ackermann_proto.ParamMPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamMPC::CopyFrom(const ParamMPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:willand_ackermann_proto.ParamMPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamMPC::IsInitialized() const {
  return true;
}

void ParamMPC::Swap(ParamMPC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamMPC::InternalSwap(ParamMPC* other) {
  using std::swap;
  swap(interval_, other->interval_);
  swap(horizon_, other->horizon_);
  swap(state_dim_, other->state_dim_);
  swap(min_vel_, other->min_vel_);
  swap(max_vel_, other->max_vel_);
  swap(min_acc_, other->min_acc_);
  swap(max_acc_, other->max_acc_);
  swap(steer_angle_rate_limit_, other->steer_angle_rate_limit_);
  swap(track_width_, other->track_width_);
  swap(wheel_base_, other->wheel_base_);
  swap(input_dim_, other->input_dim_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParamMPC::GetMetadata() const {
  protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrackingData::InitAsDefaultInstance() {
  ::willand_ackermann_proto::_TrackingData_default_instance_._instance.get_mutable()->mpc_param_ = const_cast< ::willand_ackermann_proto::ParamMPC*>(
      ::willand_ackermann_proto::ParamMPC::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackingData::kMpcParamFieldNumber;
const int TrackingData::kLengthFieldNumber;
const int TrackingData::kTimestampFieldNumber;
const int TrackingData::kReferStateFieldNumber;
const int TrackingData::kActualStateFieldNumber;
const int TrackingData::kCtrlCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackingData::TrackingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_tracking_5fdata_2eproto::scc_info_TrackingData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:willand_ackermann_proto.TrackingData)
}
TrackingData::TrackingData(const TrackingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      timestamp_(from.timestamp_),
      refer_state_(from.refer_state_),
      actual_state_(from.actual_state_),
      ctrl_cmd_(from.ctrl_cmd_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mpc_param()) {
    mpc_param_ = new ::willand_ackermann_proto::ParamMPC(*from.mpc_param_);
  } else {
    mpc_param_ = NULL;
  }
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:willand_ackermann_proto.TrackingData)
}

void TrackingData::SharedCtor() {
  ::memset(&mpc_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&mpc_param_)) + sizeof(length_));
}

TrackingData::~TrackingData() {
  // @@protoc_insertion_point(destructor:willand_ackermann_proto.TrackingData)
  SharedDtor();
}

void TrackingData::SharedDtor() {
  if (this != internal_default_instance()) delete mpc_param_;
}

void TrackingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrackingData::descriptor() {
  ::protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrackingData& TrackingData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_tracking_5fdata_2eproto::scc_info_TrackingData.base);
  return *internal_default_instance();
}


void TrackingData::Clear() {
// @@protoc_insertion_point(message_clear_start:willand_ackermann_proto.TrackingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_.Clear();
  refer_state_.Clear();
  actual_state_.Clear();
  ctrl_cmd_.Clear();
  if (GetArenaNoVirtual() == NULL && mpc_param_ != NULL) {
    delete mpc_param_;
  }
  mpc_param_ = NULL;
  length_ = 0u;
  _internal_metadata_.Clear();
}

bool TrackingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:willand_ackermann_proto.TrackingData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .willand_ackermann_proto.ParamMPC mpc_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mpc_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_timestamp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_timestamp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .willand_ackermann_proto.StateType refer_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_refer_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .willand_ackermann_proto.StateType actual_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actual_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .willand_ackermann_proto.ControlType ctrl_cmd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ctrl_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:willand_ackermann_proto.TrackingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:willand_ackermann_proto.TrackingData)
  return false;
#undef DO_
}

void TrackingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:willand_ackermann_proto.TrackingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .willand_ackermann_proto.ParamMPC mpc_param = 1;
  if (this->has_mpc_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_mpc_param(), output);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  // repeated uint32 timestamp = 3;
  if (this->timestamp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _timestamp_cached_byte_size_));
  }
  for (int i = 0, n = this->timestamp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->timestamp(i), output);
  }

  // repeated .willand_ackermann_proto.StateType refer_state = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refer_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->refer_state(static_cast<int>(i)),
      output);
  }

  // repeated .willand_ackermann_proto.StateType actual_state = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actual_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->actual_state(static_cast<int>(i)),
      output);
  }

  // repeated .willand_ackermann_proto.ControlType ctrl_cmd = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrl_cmd_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->ctrl_cmd(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:willand_ackermann_proto.TrackingData)
}

::google::protobuf::uint8* TrackingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:willand_ackermann_proto.TrackingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .willand_ackermann_proto.ParamMPC mpc_param = 1;
  if (this->has_mpc_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_mpc_param(), deterministic, target);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  // repeated uint32 timestamp = 3;
  if (this->timestamp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _timestamp_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->timestamp_, target);
  }

  // repeated .willand_ackermann_proto.StateType refer_state = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refer_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->refer_state(static_cast<int>(i)), deterministic, target);
  }

  // repeated .willand_ackermann_proto.StateType actual_state = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actual_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->actual_state(static_cast<int>(i)), deterministic, target);
  }

  // repeated .willand_ackermann_proto.ControlType ctrl_cmd = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ctrl_cmd_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->ctrl_cmd(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:willand_ackermann_proto.TrackingData)
  return target;
}

size_t TrackingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:willand_ackermann_proto.TrackingData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 timestamp = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->timestamp_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _timestamp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .willand_ackermann_proto.StateType refer_state = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->refer_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->refer_state(static_cast<int>(i)));
    }
  }

  // repeated .willand_ackermann_proto.StateType actual_state = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->actual_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actual_state(static_cast<int>(i)));
    }
  }

  // repeated .willand_ackermann_proto.ControlType ctrl_cmd = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->ctrl_cmd_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ctrl_cmd(static_cast<int>(i)));
    }
  }

  // .willand_ackermann_proto.ParamMPC mpc_param = 1;
  if (this->has_mpc_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mpc_param_);
  }

  // uint32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:willand_ackermann_proto.TrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackingData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:willand_ackermann_proto.TrackingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:willand_ackermann_proto.TrackingData)
    MergeFrom(*source);
  }
}

void TrackingData::MergeFrom(const TrackingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:willand_ackermann_proto.TrackingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timestamp_.MergeFrom(from.timestamp_);
  refer_state_.MergeFrom(from.refer_state_);
  actual_state_.MergeFrom(from.actual_state_);
  ctrl_cmd_.MergeFrom(from.ctrl_cmd_);
  if (from.has_mpc_param()) {
    mutable_mpc_param()->::willand_ackermann_proto::ParamMPC::MergeFrom(from.mpc_param());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void TrackingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:willand_ackermann_proto.TrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingData::CopyFrom(const TrackingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:willand_ackermann_proto.TrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingData::IsInitialized() const {
  return true;
}

void TrackingData::Swap(TrackingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackingData::InternalSwap(TrackingData* other) {
  using std::swap;
  timestamp_.InternalSwap(&other->timestamp_);
  CastToBase(&refer_state_)->InternalSwap(CastToBase(&other->refer_state_));
  CastToBase(&actual_state_)->InternalSwap(CastToBase(&other->actual_state_));
  CastToBase(&ctrl_cmd_)->InternalSwap(CastToBase(&other->ctrl_cmd_));
  swap(mpc_param_, other->mpc_param_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrackingData::GetMetadata() const {
  protobuf_tracking_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tracking_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace willand_ackermann_proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::willand_ackermann_proto::StateType* Arena::CreateMaybeMessage< ::willand_ackermann_proto::StateType >(Arena* arena) {
  return Arena::CreateInternal< ::willand_ackermann_proto::StateType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::willand_ackermann_proto::ControlType* Arena::CreateMaybeMessage< ::willand_ackermann_proto::ControlType >(Arena* arena) {
  return Arena::CreateInternal< ::willand_ackermann_proto::ControlType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::willand_ackermann_proto::ParamMPC* Arena::CreateMaybeMessage< ::willand_ackermann_proto::ParamMPC >(Arena* arena) {
  return Arena::CreateInternal< ::willand_ackermann_proto::ParamMPC >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::willand_ackermann_proto::TrackingData* Arena::CreateMaybeMessage< ::willand_ackermann_proto::TrackingData >(Arena* arena) {
  return Arena::CreateInternal< ::willand_ackermann_proto::TrackingData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
