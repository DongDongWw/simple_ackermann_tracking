// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracking_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace simple_ackermann_proto {

namespace {

const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlSignal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlSignal_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParamMPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParamMPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackingData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracking_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tracking_5fdata_2eproto() {
  protobuf_AddDesc_tracking_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracking_data.proto");
  GOOGLE_CHECK(file != NULL);
  State_descriptor_ = file->message_type(0);
  static const int State_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, omega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, kappa_),
  };
  State_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      -1,
      -1,
      -1,
      sizeof(State),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _is_default_instance_));
  ControlSignal_descriptor_ = file->message_type(1);
  static const int ControlSignal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSignal, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSignal, omega_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSignal, kappa_),
  };
  ControlSignal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlSignal_descriptor_,
      ControlSignal::default_instance_,
      ControlSignal_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControlSignal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSignal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSignal, _is_default_instance_));
  ParamMPC_descriptor_ = file->message_type(2);
  static const int ParamMPC_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, horizon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, state_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, input_dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, max_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, min_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, max_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, min_acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, steer_angle_rate_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, min_turn_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, track_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, wheel_base_),
  };
  ParamMPC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParamMPC_descriptor_,
      ParamMPC::default_instance_,
      ParamMPC_offsets_,
      -1,
      -1,
      -1,
      sizeof(ParamMPC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParamMPC, _is_default_instance_));
  TrackingData_descriptor_ = file->message_type(3);
  static const int TrackingData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingData, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingData, reference_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingData, actual_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingData, control_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingData, mpc_param_),
  };
  TrackingData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackingData_descriptor_,
      TrackingData::default_instance_,
      TrackingData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TrackingData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackingData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracking_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      State_descriptor_, &State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlSignal_descriptor_, &ControlSignal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParamMPC_descriptor_, &ParamMPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackingData_descriptor_, &TrackingData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracking_5fdata_2eproto() {
  delete State::default_instance_;
  delete State_reflection_;
  delete ControlSignal::default_instance_;
  delete ControlSignal_reflection_;
  delete ParamMPC::default_instance_;
  delete ParamMPC_reflection_;
  delete TrackingData::default_instance_;
  delete TrackingData_reflection_;
}

void protobuf_AddDesc_tracking_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_tracking_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023tracking_data.proto\022\026simple_ackermann_"
    "proto\"U\n\005State\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\r\n\005"
    "theta\030\003 \001(\001\022\t\n\001v\030\004 \001(\001\022\r\n\005omega\030\005 \001(\001\022\r\n"
    "\005kappa\030\006 \001(\001\"8\n\rControlSignal\022\t\n\001v\030\001 \001(\001"
    "\022\r\n\005omega\030\002 \001(\001\022\r\n\005kappa\030\003 \001(\001\"\371\001\n\010Param"
    "MPC\022\017\n\007horizon\030\001 \001(\r\022\020\n\010interval\030\002 \001(\001\022\021"
    "\n\tstate_dim\030\003 \001(\r\022\021\n\tinput_dim\030\004 \001(\r\022\017\n\007"
    "max_vel\030\005 \001(\001\022\017\n\007min_vel\030\006 \001(\001\022\017\n\007max_ac"
    "c\030\007 \001(\001\022\017\n\007min_acc\030\010 \001(\001\022\036\n\026steer_angle_"
    "rate_limit\030\t \001(\001\022\027\n\017min_turn_radius\030\n \001("
    "\001\022\023\n\013track_width\030\013 \001(\001\022\022\n\nwheel_base\030\014 \001"
    "(\001\"\220\002\n\014TrackingData\022\016\n\006length\030\001 \001(\r\022\021\n\tt"
    "imestamp\030\002 \003(\t\0225\n\016reference_data\030\003 \003(\0132\035"
    ".simple_ackermann_proto.State\0222\n\013actual_"
    "data\030\004 \003(\0132\035.simple_ackermann_proto.Stat"
    "e\022=\n\016control_signal\030\005 \003(\0132%.simple_acker"
    "mann_proto.ControlSignal\0223\n\tmpc_param\030\006 "
    "\001(\0132 .simple_ackermann_proto.ParamMPCb\006p"
    "roto3", 725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracking_data.proto", &protobuf_RegisterTypes);
  State::default_instance_ = new State();
  ControlSignal::default_instance_ = new ControlSignal();
  ParamMPC::default_instance_ = new ParamMPC();
  TrackingData::default_instance_ = new TrackingData();
  State::default_instance_->InitAsDefaultInstance();
  ControlSignal::default_instance_->InitAsDefaultInstance();
  ParamMPC::default_instance_->InitAsDefaultInstance();
  TrackingData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracking_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracking_5fdata_2eproto {
  StaticDescriptorInitializer_tracking_5fdata_2eproto() {
    protobuf_AddDesc_tracking_5fdata_2eproto();
  }
} static_descriptor_initializer_tracking_5fdata_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int State::kXFieldNumber;
const int State::kYFieldNumber;
const int State::kThetaFieldNumber;
const int State::kVFieldNumber;
const int State::kOmegaFieldNumber;
const int State::kKappaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

State::State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simple_ackermann_proto.State)
}

void State::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

State::State(const State& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simple_ackermann_proto.State)
}

void State::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  theta_ = 0;
  v_ = 0;
  omega_ = 0;
  kappa_ = 0;
}

State::~State() {
  // @@protoc_insertion_point(destructor:simple_ackermann_proto.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracking_5fdata_2eproto();
  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New(::google::protobuf::Arena* arena) const {
  State* n = new State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void State::Clear() {
// @@protoc_insertion_point(message_clear_start:simple_ackermann_proto.State)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(State, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<State*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, kappa_);

#undef ZR_HELPER_
#undef ZR_

}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simple_ackermann_proto.State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_theta;
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (tag == 25) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_v;
        break;
      }

      // optional double v = 4;
      case 4: {
        if (tag == 33) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_omega;
        break;
      }

      // optional double omega = 5;
      case 5: {
        if (tag == 41) {
         parse_omega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_kappa;
        break;
      }

      // optional double kappa = 6;
      case 6: {
        if (tag == 49) {
         parse_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simple_ackermann_proto.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simple_ackermann_proto.State)
  return false;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simple_ackermann_proto.State)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double theta = 3;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional double v = 4;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->v(), output);
  }

  // optional double omega = 5;
  if (this->omega() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->omega(), output);
  }

  // optional double kappa = 6;
  if (this->kappa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->kappa(), output);
  }

  // @@protoc_insertion_point(serialize_end:simple_ackermann_proto.State)
}

::google::protobuf::uint8* State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simple_ackermann_proto.State)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double theta = 3;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional double v = 4;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->v(), target);
  }

  // optional double omega = 5;
  if (this->omega() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->omega(), target);
  }

  // optional double kappa = 6;
  if (this->kappa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->kappa(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simple_ackermann_proto.State)
  return target;
}

int State::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simple_ackermann_proto.State)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double theta = 3;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  // optional double v = 4;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // optional double omega = 5;
  if (this->omega() != 0) {
    total_size += 1 + 8;
  }

  // optional double kappa = 6;
  if (this->kappa() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simple_ackermann_proto.State)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const State* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simple_ackermann_proto.State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simple_ackermann_proto.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simple_ackermann_proto.State)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.omega() != 0) {
    set_omega(from.omega());
  }
  if (from.kappa() != 0) {
    set_kappa(from.kappa());
  }
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simple_ackermann_proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simple_ackermann_proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {

  return true;
}

void State::Swap(State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void State::InternalSwap(State* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(theta_, other->theta_);
  std::swap(v_, other->v_);
  std::swap(omega_, other->omega_);
  std::swap(kappa_, other->kappa_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// optional double x = 1;
void State::clear_x() {
  x_ = 0;
}
 double State::x() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.x)
  return x_;
}
 void State::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.x)
}

// optional double y = 2;
void State::clear_y() {
  y_ = 0;
}
 double State::y() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.y)
  return y_;
}
 void State::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.y)
}

// optional double theta = 3;
void State::clear_theta() {
  theta_ = 0;
}
 double State::theta() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.theta)
  return theta_;
}
 void State::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.theta)
}

// optional double v = 4;
void State::clear_v() {
  v_ = 0;
}
 double State::v() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.v)
  return v_;
}
 void State::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.v)
}

// optional double omega = 5;
void State::clear_omega() {
  omega_ = 0;
}
 double State::omega() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.omega)
  return omega_;
}
 void State::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.omega)
}

// optional double kappa = 6;
void State::clear_kappa() {
  kappa_ = 0;
}
 double State::kappa() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.kappa)
  return kappa_;
}
 void State::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.kappa)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlSignal::kVFieldNumber;
const int ControlSignal::kOmegaFieldNumber;
const int ControlSignal::kKappaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlSignal::ControlSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simple_ackermann_proto.ControlSignal)
}

void ControlSignal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ControlSignal::ControlSignal(const ControlSignal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simple_ackermann_proto.ControlSignal)
}

void ControlSignal::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  v_ = 0;
  omega_ = 0;
  kappa_ = 0;
}

ControlSignal::~ControlSignal() {
  // @@protoc_insertion_point(destructor:simple_ackermann_proto.ControlSignal)
  SharedDtor();
}

void ControlSignal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlSignal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlSignal_descriptor_;
}

const ControlSignal& ControlSignal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracking_5fdata_2eproto();
  return *default_instance_;
}

ControlSignal* ControlSignal::default_instance_ = NULL;

ControlSignal* ControlSignal::New(::google::protobuf::Arena* arena) const {
  ControlSignal* n = new ControlSignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:simple_ackermann_proto.ControlSignal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ControlSignal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControlSignal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(v_, kappa_);

#undef ZR_HELPER_
#undef ZR_

}

bool ControlSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simple_ackermann_proto.ControlSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double v = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_omega;
        break;
      }

      // optional double omega = 2;
      case 2: {
        if (tag == 17) {
         parse_omega:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_kappa;
        break;
      }

      // optional double kappa = 3;
      case 3: {
        if (tag == 25) {
         parse_kappa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simple_ackermann_proto.ControlSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simple_ackermann_proto.ControlSignal)
  return false;
#undef DO_
}

void ControlSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simple_ackermann_proto.ControlSignal)
  // optional double v = 1;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->v(), output);
  }

  // optional double omega = 2;
  if (this->omega() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->omega(), output);
  }

  // optional double kappa = 3;
  if (this->kappa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kappa(), output);
  }

  // @@protoc_insertion_point(serialize_end:simple_ackermann_proto.ControlSignal)
}

::google::protobuf::uint8* ControlSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simple_ackermann_proto.ControlSignal)
  // optional double v = 1;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->v(), target);
  }

  // optional double omega = 2;
  if (this->omega() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->omega(), target);
  }

  // optional double kappa = 3;
  if (this->kappa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kappa(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simple_ackermann_proto.ControlSignal)
  return target;
}

int ControlSignal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simple_ackermann_proto.ControlSignal)
  int total_size = 0;

  // optional double v = 1;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // optional double omega = 2;
  if (this->omega() != 0) {
    total_size += 1 + 8;
  }

  // optional double kappa = 3;
  if (this->kappa() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simple_ackermann_proto.ControlSignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ControlSignal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simple_ackermann_proto.ControlSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simple_ackermann_proto.ControlSignal)
    MergeFrom(*source);
  }
}

void ControlSignal::MergeFrom(const ControlSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simple_ackermann_proto.ControlSignal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.omega() != 0) {
    set_omega(from.omega());
  }
  if (from.kappa() != 0) {
    set_kappa(from.kappa());
  }
}

void ControlSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simple_ackermann_proto.ControlSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlSignal::CopyFrom(const ControlSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simple_ackermann_proto.ControlSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSignal::IsInitialized() const {

  return true;
}

void ControlSignal::Swap(ControlSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlSignal::InternalSwap(ControlSignal* other) {
  std::swap(v_, other->v_);
  std::swap(omega_, other->omega_);
  std::swap(kappa_, other->kappa_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlSignal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlSignal_descriptor_;
  metadata.reflection = ControlSignal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlSignal

// optional double v = 1;
void ControlSignal::clear_v() {
  v_ = 0;
}
 double ControlSignal::v() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ControlSignal.v)
  return v_;
}
 void ControlSignal::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ControlSignal.v)
}

// optional double omega = 2;
void ControlSignal::clear_omega() {
  omega_ = 0;
}
 double ControlSignal::omega() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ControlSignal.omega)
  return omega_;
}
 void ControlSignal::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ControlSignal.omega)
}

// optional double kappa = 3;
void ControlSignal::clear_kappa() {
  kappa_ = 0;
}
 double ControlSignal::kappa() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ControlSignal.kappa)
  return kappa_;
}
 void ControlSignal::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ControlSignal.kappa)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParamMPC::kHorizonFieldNumber;
const int ParamMPC::kIntervalFieldNumber;
const int ParamMPC::kStateDimFieldNumber;
const int ParamMPC::kInputDimFieldNumber;
const int ParamMPC::kMaxVelFieldNumber;
const int ParamMPC::kMinVelFieldNumber;
const int ParamMPC::kMaxAccFieldNumber;
const int ParamMPC::kMinAccFieldNumber;
const int ParamMPC::kSteerAngleRateLimitFieldNumber;
const int ParamMPC::kMinTurnRadiusFieldNumber;
const int ParamMPC::kTrackWidthFieldNumber;
const int ParamMPC::kWheelBaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParamMPC::ParamMPC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simple_ackermann_proto.ParamMPC)
}

void ParamMPC::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ParamMPC::ParamMPC(const ParamMPC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simple_ackermann_proto.ParamMPC)
}

void ParamMPC::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  horizon_ = 0u;
  interval_ = 0;
  state_dim_ = 0u;
  input_dim_ = 0u;
  max_vel_ = 0;
  min_vel_ = 0;
  max_acc_ = 0;
  min_acc_ = 0;
  steer_angle_rate_limit_ = 0;
  min_turn_radius_ = 0;
  track_width_ = 0;
  wheel_base_ = 0;
}

ParamMPC::~ParamMPC() {
  // @@protoc_insertion_point(destructor:simple_ackermann_proto.ParamMPC)
  SharedDtor();
}

void ParamMPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParamMPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParamMPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParamMPC_descriptor_;
}

const ParamMPC& ParamMPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracking_5fdata_2eproto();
  return *default_instance_;
}

ParamMPC* ParamMPC::default_instance_ = NULL;

ParamMPC* ParamMPC::New(::google::protobuf::Arena* arena) const {
  ParamMPC* n = new ParamMPC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParamMPC::Clear() {
// @@protoc_insertion_point(message_clear_start:simple_ackermann_proto.ParamMPC)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParamMPC, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParamMPC*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(interval_, min_acc_);
  input_dim_ = 0u;
  ZR_(steer_angle_rate_limit_, wheel_base_);

#undef ZR_HELPER_
#undef ZR_

}

bool ParamMPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simple_ackermann_proto.ParamMPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 horizon = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horizon_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_interval;
        break;
      }

      // optional double interval = 2;
      case 2: {
        if (tag == 17) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interval_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state_dim;
        break;
      }

      // optional uint32 state_dim = 3;
      case 3: {
        if (tag == 24) {
         parse_state_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_dim_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_input_dim;
        break;
      }

      // optional uint32 input_dim = 4;
      case 4: {
        if (tag == 32) {
         parse_input_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_dim_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_max_vel;
        break;
      }

      // optional double max_vel = 5;
      case 5: {
        if (tag == 41) {
         parse_max_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_vel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_min_vel;
        break;
      }

      // optional double min_vel = 6;
      case 6: {
        if (tag == 49) {
         parse_min_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_vel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_max_acc;
        break;
      }

      // optional double max_acc = 7;
      case 7: {
        if (tag == 57) {
         parse_max_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_min_acc;
        break;
      }

      // optional double min_acc = 8;
      case 8: {
        if (tag == 65) {
         parse_min_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_acc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_steer_angle_rate_limit;
        break;
      }

      // optional double steer_angle_rate_limit = 9;
      case 9: {
        if (tag == 73) {
         parse_steer_angle_rate_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_angle_rate_limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_min_turn_radius;
        break;
      }

      // optional double min_turn_radius = 10;
      case 10: {
        if (tag == 81) {
         parse_min_turn_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_turn_radius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_track_width;
        break;
      }

      // optional double track_width = 11;
      case 11: {
        if (tag == 89) {
         parse_track_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &track_width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_wheel_base;
        break;
      }

      // optional double wheel_base = 12;
      case 12: {
        if (tag == 97) {
         parse_wheel_base:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simple_ackermann_proto.ParamMPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simple_ackermann_proto.ParamMPC)
  return false;
#undef DO_
}

void ParamMPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simple_ackermann_proto.ParamMPC)
  // optional uint32 horizon = 1;
  if (this->horizon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->horizon(), output);
  }

  // optional double interval = 2;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->interval(), output);
  }

  // optional uint32 state_dim = 3;
  if (this->state_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state_dim(), output);
  }

  // optional uint32 input_dim = 4;
  if (this->input_dim() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->input_dim(), output);
  }

  // optional double max_vel = 5;
  if (this->max_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_vel(), output);
  }

  // optional double min_vel = 6;
  if (this->min_vel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_vel(), output);
  }

  // optional double max_acc = 7;
  if (this->max_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max_acc(), output);
  }

  // optional double min_acc = 8;
  if (this->min_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->min_acc(), output);
  }

  // optional double steer_angle_rate_limit = 9;
  if (this->steer_angle_rate_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->steer_angle_rate_limit(), output);
  }

  // optional double min_turn_radius = 10;
  if (this->min_turn_radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->min_turn_radius(), output);
  }

  // optional double track_width = 11;
  if (this->track_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->track_width(), output);
  }

  // optional double wheel_base = 12;
  if (this->wheel_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wheel_base(), output);
  }

  // @@protoc_insertion_point(serialize_end:simple_ackermann_proto.ParamMPC)
}

::google::protobuf::uint8* ParamMPC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simple_ackermann_proto.ParamMPC)
  // optional uint32 horizon = 1;
  if (this->horizon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->horizon(), target);
  }

  // optional double interval = 2;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->interval(), target);
  }

  // optional uint32 state_dim = 3;
  if (this->state_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state_dim(), target);
  }

  // optional uint32 input_dim = 4;
  if (this->input_dim() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->input_dim(), target);
  }

  // optional double max_vel = 5;
  if (this->max_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_vel(), target);
  }

  // optional double min_vel = 6;
  if (this->min_vel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_vel(), target);
  }

  // optional double max_acc = 7;
  if (this->max_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max_acc(), target);
  }

  // optional double min_acc = 8;
  if (this->min_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->min_acc(), target);
  }

  // optional double steer_angle_rate_limit = 9;
  if (this->steer_angle_rate_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->steer_angle_rate_limit(), target);
  }

  // optional double min_turn_radius = 10;
  if (this->min_turn_radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->min_turn_radius(), target);
  }

  // optional double track_width = 11;
  if (this->track_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->track_width(), target);
  }

  // optional double wheel_base = 12;
  if (this->wheel_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wheel_base(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simple_ackermann_proto.ParamMPC)
  return target;
}

int ParamMPC::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simple_ackermann_proto.ParamMPC)
  int total_size = 0;

  // optional uint32 horizon = 1;
  if (this->horizon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->horizon());
  }

  // optional double interval = 2;
  if (this->interval() != 0) {
    total_size += 1 + 8;
  }

  // optional uint32 state_dim = 3;
  if (this->state_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state_dim());
  }

  // optional uint32 input_dim = 4;
  if (this->input_dim() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_dim());
  }

  // optional double max_vel = 5;
  if (this->max_vel() != 0) {
    total_size += 1 + 8;
  }

  // optional double min_vel = 6;
  if (this->min_vel() != 0) {
    total_size += 1 + 8;
  }

  // optional double max_acc = 7;
  if (this->max_acc() != 0) {
    total_size += 1 + 8;
  }

  // optional double min_acc = 8;
  if (this->min_acc() != 0) {
    total_size += 1 + 8;
  }

  // optional double steer_angle_rate_limit = 9;
  if (this->steer_angle_rate_limit() != 0) {
    total_size += 1 + 8;
  }

  // optional double min_turn_radius = 10;
  if (this->min_turn_radius() != 0) {
    total_size += 1 + 8;
  }

  // optional double track_width = 11;
  if (this->track_width() != 0) {
    total_size += 1 + 8;
  }

  // optional double wheel_base = 12;
  if (this->wheel_base() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParamMPC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simple_ackermann_proto.ParamMPC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ParamMPC* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParamMPC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simple_ackermann_proto.ParamMPC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simple_ackermann_proto.ParamMPC)
    MergeFrom(*source);
  }
}

void ParamMPC::MergeFrom(const ParamMPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simple_ackermann_proto.ParamMPC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.horizon() != 0) {
    set_horizon(from.horizon());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
  if (from.state_dim() != 0) {
    set_state_dim(from.state_dim());
  }
  if (from.input_dim() != 0) {
    set_input_dim(from.input_dim());
  }
  if (from.max_vel() != 0) {
    set_max_vel(from.max_vel());
  }
  if (from.min_vel() != 0) {
    set_min_vel(from.min_vel());
  }
  if (from.max_acc() != 0) {
    set_max_acc(from.max_acc());
  }
  if (from.min_acc() != 0) {
    set_min_acc(from.min_acc());
  }
  if (from.steer_angle_rate_limit() != 0) {
    set_steer_angle_rate_limit(from.steer_angle_rate_limit());
  }
  if (from.min_turn_radius() != 0) {
    set_min_turn_radius(from.min_turn_radius());
  }
  if (from.track_width() != 0) {
    set_track_width(from.track_width());
  }
  if (from.wheel_base() != 0) {
    set_wheel_base(from.wheel_base());
  }
}

void ParamMPC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simple_ackermann_proto.ParamMPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParamMPC::CopyFrom(const ParamMPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simple_ackermann_proto.ParamMPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParamMPC::IsInitialized() const {

  return true;
}

void ParamMPC::Swap(ParamMPC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParamMPC::InternalSwap(ParamMPC* other) {
  std::swap(horizon_, other->horizon_);
  std::swap(interval_, other->interval_);
  std::swap(state_dim_, other->state_dim_);
  std::swap(input_dim_, other->input_dim_);
  std::swap(max_vel_, other->max_vel_);
  std::swap(min_vel_, other->min_vel_);
  std::swap(max_acc_, other->max_acc_);
  std::swap(min_acc_, other->min_acc_);
  std::swap(steer_angle_rate_limit_, other->steer_angle_rate_limit_);
  std::swap(min_turn_radius_, other->min_turn_radius_);
  std::swap(track_width_, other->track_width_);
  std::swap(wheel_base_, other->wheel_base_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParamMPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParamMPC_descriptor_;
  metadata.reflection = ParamMPC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParamMPC

// optional uint32 horizon = 1;
void ParamMPC::clear_horizon() {
  horizon_ = 0u;
}
 ::google::protobuf::uint32 ParamMPC::horizon() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.horizon)
  return horizon_;
}
 void ParamMPC::set_horizon(::google::protobuf::uint32 value) {
  
  horizon_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.horizon)
}

// optional double interval = 2;
void ParamMPC::clear_interval() {
  interval_ = 0;
}
 double ParamMPC::interval() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.interval)
  return interval_;
}
 void ParamMPC::set_interval(double value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.interval)
}

// optional uint32 state_dim = 3;
void ParamMPC::clear_state_dim() {
  state_dim_ = 0u;
}
 ::google::protobuf::uint32 ParamMPC::state_dim() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.state_dim)
  return state_dim_;
}
 void ParamMPC::set_state_dim(::google::protobuf::uint32 value) {
  
  state_dim_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.state_dim)
}

// optional uint32 input_dim = 4;
void ParamMPC::clear_input_dim() {
  input_dim_ = 0u;
}
 ::google::protobuf::uint32 ParamMPC::input_dim() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.input_dim)
  return input_dim_;
}
 void ParamMPC::set_input_dim(::google::protobuf::uint32 value) {
  
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.input_dim)
}

// optional double max_vel = 5;
void ParamMPC::clear_max_vel() {
  max_vel_ = 0;
}
 double ParamMPC::max_vel() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.max_vel)
  return max_vel_;
}
 void ParamMPC::set_max_vel(double value) {
  
  max_vel_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.max_vel)
}

// optional double min_vel = 6;
void ParamMPC::clear_min_vel() {
  min_vel_ = 0;
}
 double ParamMPC::min_vel() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.min_vel)
  return min_vel_;
}
 void ParamMPC::set_min_vel(double value) {
  
  min_vel_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.min_vel)
}

// optional double max_acc = 7;
void ParamMPC::clear_max_acc() {
  max_acc_ = 0;
}
 double ParamMPC::max_acc() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.max_acc)
  return max_acc_;
}
 void ParamMPC::set_max_acc(double value) {
  
  max_acc_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.max_acc)
}

// optional double min_acc = 8;
void ParamMPC::clear_min_acc() {
  min_acc_ = 0;
}
 double ParamMPC::min_acc() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.min_acc)
  return min_acc_;
}
 void ParamMPC::set_min_acc(double value) {
  
  min_acc_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.min_acc)
}

// optional double steer_angle_rate_limit = 9;
void ParamMPC::clear_steer_angle_rate_limit() {
  steer_angle_rate_limit_ = 0;
}
 double ParamMPC::steer_angle_rate_limit() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.steer_angle_rate_limit)
  return steer_angle_rate_limit_;
}
 void ParamMPC::set_steer_angle_rate_limit(double value) {
  
  steer_angle_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.steer_angle_rate_limit)
}

// optional double min_turn_radius = 10;
void ParamMPC::clear_min_turn_radius() {
  min_turn_radius_ = 0;
}
 double ParamMPC::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.min_turn_radius)
  return min_turn_radius_;
}
 void ParamMPC::set_min_turn_radius(double value) {
  
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.min_turn_radius)
}

// optional double track_width = 11;
void ParamMPC::clear_track_width() {
  track_width_ = 0;
}
 double ParamMPC::track_width() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.track_width)
  return track_width_;
}
 void ParamMPC::set_track_width(double value) {
  
  track_width_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.track_width)
}

// optional double wheel_base = 12;
void ParamMPC::clear_wheel_base() {
  wheel_base_ = 0;
}
 double ParamMPC::wheel_base() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.wheel_base)
  return wheel_base_;
}
 void ParamMPC::set_wheel_base(double value) {
  
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.wheel_base)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackingData::kLengthFieldNumber;
const int TrackingData::kTimestampFieldNumber;
const int TrackingData::kReferenceDataFieldNumber;
const int TrackingData::kActualDataFieldNumber;
const int TrackingData::kControlSignalFieldNumber;
const int TrackingData::kMpcParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackingData::TrackingData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simple_ackermann_proto.TrackingData)
}

void TrackingData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  mpc_param_ = const_cast< ::simple_ackermann_proto::ParamMPC*>(&::simple_ackermann_proto::ParamMPC::default_instance());
}

TrackingData::TrackingData(const TrackingData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simple_ackermann_proto.TrackingData)
}

void TrackingData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  length_ = 0u;
  mpc_param_ = NULL;
}

TrackingData::~TrackingData() {
  // @@protoc_insertion_point(destructor:simple_ackermann_proto.TrackingData)
  SharedDtor();
}

void TrackingData::SharedDtor() {
  if (this != default_instance_) {
    delete mpc_param_;
  }
}

void TrackingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackingData_descriptor_;
}

const TrackingData& TrackingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracking_5fdata_2eproto();
  return *default_instance_;
}

TrackingData* TrackingData::default_instance_ = NULL;

TrackingData* TrackingData::New(::google::protobuf::Arena* arena) const {
  TrackingData* n = new TrackingData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackingData::Clear() {
// @@protoc_insertion_point(message_clear_start:simple_ackermann_proto.TrackingData)
  length_ = 0u;
  if (GetArenaNoVirtual() == NULL && mpc_param_ != NULL) delete mpc_param_;
  mpc_param_ = NULL;
  timestamp_.Clear();
  reference_data_.Clear();
  actual_data_.Clear();
  control_signal_.Clear();
}

bool TrackingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simple_ackermann_proto.TrackingData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // repeated string timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp(this->timestamp_size() - 1).data(),
            this->timestamp(this->timestamp_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "simple_ackermann_proto.TrackingData.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        if (input->ExpectTag(26)) goto parse_reference_data;
        break;
      }

      // repeated .simple_ackermann_proto.State reference_data = 3;
      case 3: {
        if (tag == 26) {
         parse_reference_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_reference_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_reference_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_reference_data;
        if (input->ExpectTag(34)) goto parse_loop_actual_data;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .simple_ackermann_proto.State actual_data = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actual_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actual_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_actual_data;
        if (input->ExpectTag(42)) goto parse_loop_control_signal;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .simple_ackermann_proto.ControlSignal control_signal = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_control_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_control_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_control_signal;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_mpc_param;
        break;
      }

      // optional .simple_ackermann_proto.ParamMPC mpc_param = 6;
      case 6: {
        if (tag == 50) {
         parse_mpc_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpc_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simple_ackermann_proto.TrackingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simple_ackermann_proto.TrackingData)
  return false;
#undef DO_
}

void TrackingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simple_ackermann_proto.TrackingData)
  // optional uint32 length = 1;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->length(), output);
  }

  // repeated string timestamp = 2;
  for (int i = 0; i < this->timestamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp(i).data(), this->timestamp(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simple_ackermann_proto.TrackingData.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timestamp(i), output);
  }

  // repeated .simple_ackermann_proto.State reference_data = 3;
  for (unsigned int i = 0, n = this->reference_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reference_data(i), output);
  }

  // repeated .simple_ackermann_proto.State actual_data = 4;
  for (unsigned int i = 0, n = this->actual_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->actual_data(i), output);
  }

  // repeated .simple_ackermann_proto.ControlSignal control_signal = 5;
  for (unsigned int i = 0, n = this->control_signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->control_signal(i), output);
  }

  // optional .simple_ackermann_proto.ParamMPC mpc_param = 6;
  if (this->has_mpc_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->mpc_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:simple_ackermann_proto.TrackingData)
}

::google::protobuf::uint8* TrackingData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simple_ackermann_proto.TrackingData)
  // optional uint32 length = 1;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->length(), target);
  }

  // repeated string timestamp = 2;
  for (int i = 0; i < this->timestamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp(i).data(), this->timestamp(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "simple_ackermann_proto.TrackingData.timestamp");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->timestamp(i), target);
  }

  // repeated .simple_ackermann_proto.State reference_data = 3;
  for (unsigned int i = 0, n = this->reference_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->reference_data(i), false, target);
  }

  // repeated .simple_ackermann_proto.State actual_data = 4;
  for (unsigned int i = 0, n = this->actual_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->actual_data(i), false, target);
  }

  // repeated .simple_ackermann_proto.ControlSignal control_signal = 5;
  for (unsigned int i = 0, n = this->control_signal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->control_signal(i), false, target);
  }

  // optional .simple_ackermann_proto.ParamMPC mpc_param = 6;
  if (this->has_mpc_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->mpc_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:simple_ackermann_proto.TrackingData)
  return target;
}

int TrackingData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:simple_ackermann_proto.TrackingData)
  int total_size = 0;

  // optional uint32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  // optional .simple_ackermann_proto.ParamMPC mpc_param = 6;
  if (this->has_mpc_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mpc_param_);
  }

  // repeated string timestamp = 2;
  total_size += 1 * this->timestamp_size();
  for (int i = 0; i < this->timestamp_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->timestamp(i));
  }

  // repeated .simple_ackermann_proto.State reference_data = 3;
  total_size += 1 * this->reference_data_size();
  for (int i = 0; i < this->reference_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reference_data(i));
  }

  // repeated .simple_ackermann_proto.State actual_data = 4;
  total_size += 1 * this->actual_data_size();
  for (int i = 0; i < this->actual_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actual_data(i));
  }

  // repeated .simple_ackermann_proto.ControlSignal control_signal = 5;
  total_size += 1 * this->control_signal_size();
  for (int i = 0; i < this->control_signal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->control_signal(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simple_ackermann_proto.TrackingData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackingData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackingData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simple_ackermann_proto.TrackingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simple_ackermann_proto.TrackingData)
    MergeFrom(*source);
  }
}

void TrackingData::MergeFrom(const TrackingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simple_ackermann_proto.TrackingData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  timestamp_.MergeFrom(from.timestamp_);
  reference_data_.MergeFrom(from.reference_data_);
  actual_data_.MergeFrom(from.actual_data_);
  control_signal_.MergeFrom(from.control_signal_);
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.has_mpc_param()) {
    mutable_mpc_param()->::simple_ackermann_proto::ParamMPC::MergeFrom(from.mpc_param());
  }
}

void TrackingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simple_ackermann_proto.TrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackingData::CopyFrom(const TrackingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simple_ackermann_proto.TrackingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackingData::IsInitialized() const {

  return true;
}

void TrackingData::Swap(TrackingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackingData::InternalSwap(TrackingData* other) {
  std::swap(length_, other->length_);
  timestamp_.UnsafeArenaSwap(&other->timestamp_);
  reference_data_.UnsafeArenaSwap(&other->reference_data_);
  actual_data_.UnsafeArenaSwap(&other->actual_data_);
  control_signal_.UnsafeArenaSwap(&other->control_signal_);
  std::swap(mpc_param_, other->mpc_param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackingData_descriptor_;
  metadata.reflection = TrackingData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackingData

// optional uint32 length = 1;
void TrackingData::clear_length() {
  length_ = 0u;
}
 ::google::protobuf::uint32 TrackingData::length() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.length)
  return length_;
}
 void TrackingData::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.TrackingData.length)
}

// repeated string timestamp = 2;
int TrackingData::timestamp_size() const {
  return timestamp_.size();
}
void TrackingData::clear_timestamp() {
  timestamp_.Clear();
}
 const ::std::string& TrackingData::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Get(index);
}
 ::std::string* TrackingData::mutable_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Mutable(index);
}
 void TrackingData::set_timestamp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.TrackingData.timestamp)
  timestamp_.Mutable(index)->assign(value);
}
 void TrackingData::set_timestamp(int index, const char* value) {
  timestamp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simple_ackermann_proto.TrackingData.timestamp)
}
 void TrackingData::set_timestamp(int index, const char* value, size_t size) {
  timestamp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simple_ackermann_proto.TrackingData.timestamp)
}
 ::std::string* TrackingData::add_timestamp() {
  // @@protoc_insertion_point(field_add_mutable:simple_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Add();
}
 void TrackingData::add_timestamp(const ::std::string& value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simple_ackermann_proto.TrackingData.timestamp)
}
 void TrackingData::add_timestamp(const char* value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simple_ackermann_proto.TrackingData.timestamp)
}
 void TrackingData::add_timestamp(const char* value, size_t size) {
  timestamp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simple_ackermann_proto.TrackingData.timestamp)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackingData::timestamp() const {
  // @@protoc_insertion_point(field_list:simple_ackermann_proto.TrackingData.timestamp)
  return timestamp_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackingData::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:simple_ackermann_proto.TrackingData.timestamp)
  return &timestamp_;
}

// repeated .simple_ackermann_proto.State reference_data = 3;
int TrackingData::reference_data_size() const {
  return reference_data_.size();
}
void TrackingData::clear_reference_data() {
  reference_data_.Clear();
}
const ::simple_ackermann_proto::State& TrackingData::reference_data(int index) const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Get(index);
}
::simple_ackermann_proto::State* TrackingData::mutable_reference_data(int index) {
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Mutable(index);
}
::simple_ackermann_proto::State* TrackingData::add_reference_data() {
  // @@protoc_insertion_point(field_add:simple_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >*
TrackingData::mutable_reference_data() {
  // @@protoc_insertion_point(field_mutable_list:simple_ackermann_proto.TrackingData.reference_data)
  return &reference_data_;
}
const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >&
TrackingData::reference_data() const {
  // @@protoc_insertion_point(field_list:simple_ackermann_proto.TrackingData.reference_data)
  return reference_data_;
}

// repeated .simple_ackermann_proto.State actual_data = 4;
int TrackingData::actual_data_size() const {
  return actual_data_.size();
}
void TrackingData::clear_actual_data() {
  actual_data_.Clear();
}
const ::simple_ackermann_proto::State& TrackingData::actual_data(int index) const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Get(index);
}
::simple_ackermann_proto::State* TrackingData::mutable_actual_data(int index) {
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Mutable(index);
}
::simple_ackermann_proto::State* TrackingData::add_actual_data() {
  // @@protoc_insertion_point(field_add:simple_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >*
TrackingData::mutable_actual_data() {
  // @@protoc_insertion_point(field_mutable_list:simple_ackermann_proto.TrackingData.actual_data)
  return &actual_data_;
}
const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >&
TrackingData::actual_data() const {
  // @@protoc_insertion_point(field_list:simple_ackermann_proto.TrackingData.actual_data)
  return actual_data_;
}

// repeated .simple_ackermann_proto.ControlSignal control_signal = 5;
int TrackingData::control_signal_size() const {
  return control_signal_.size();
}
void TrackingData::clear_control_signal() {
  control_signal_.Clear();
}
const ::simple_ackermann_proto::ControlSignal& TrackingData::control_signal(int index) const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Get(index);
}
::simple_ackermann_proto::ControlSignal* TrackingData::mutable_control_signal(int index) {
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Mutable(index);
}
::simple_ackermann_proto::ControlSignal* TrackingData::add_control_signal() {
  // @@protoc_insertion_point(field_add:simple_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Add();
}
::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::ControlSignal >*
TrackingData::mutable_control_signal() {
  // @@protoc_insertion_point(field_mutable_list:simple_ackermann_proto.TrackingData.control_signal)
  return &control_signal_;
}
const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::ControlSignal >&
TrackingData::control_signal() const {
  // @@protoc_insertion_point(field_list:simple_ackermann_proto.TrackingData.control_signal)
  return control_signal_;
}

// optional .simple_ackermann_proto.ParamMPC mpc_param = 6;
bool TrackingData::has_mpc_param() const {
  return !_is_default_instance_ && mpc_param_ != NULL;
}
void TrackingData::clear_mpc_param() {
  if (GetArenaNoVirtual() == NULL && mpc_param_ != NULL) delete mpc_param_;
  mpc_param_ = NULL;
}
const ::simple_ackermann_proto::ParamMPC& TrackingData::mpc_param() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.mpc_param)
  return mpc_param_ != NULL ? *mpc_param_ : *default_instance_->mpc_param_;
}
::simple_ackermann_proto::ParamMPC* TrackingData::mutable_mpc_param() {
  
  if (mpc_param_ == NULL) {
    mpc_param_ = new ::simple_ackermann_proto::ParamMPC;
  }
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.mpc_param)
  return mpc_param_;
}
::simple_ackermann_proto::ParamMPC* TrackingData::release_mpc_param() {
  // @@protoc_insertion_point(field_release:simple_ackermann_proto.TrackingData.mpc_param)
  
  ::simple_ackermann_proto::ParamMPC* temp = mpc_param_;
  mpc_param_ = NULL;
  return temp;
}
void TrackingData::set_allocated_mpc_param(::simple_ackermann_proto::ParamMPC* mpc_param) {
  delete mpc_param_;
  mpc_param_ = mpc_param;
  if (mpc_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:simple_ackermann_proto.TrackingData.mpc_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace simple_ackermann_proto

// @@protoc_insertion_point(global_scope)
