// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking_data.proto

#ifndef PROTOBUF_INCLUDED_tracking_5fdata_2eproto
#define PROTOBUF_INCLUDED_tracking_5fdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tracking_5fdata_2eproto 

namespace protobuf_tracking_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tracking_5fdata_2eproto
namespace willand_ackermann_proto {
class ControlSignal;
class ControlSignalDefaultTypeInternal;
extern ControlSignalDefaultTypeInternal _ControlSignal_default_instance_;
class ParamMPC;
class ParamMPCDefaultTypeInternal;
extern ParamMPCDefaultTypeInternal _ParamMPC_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class TrackingData;
class TrackingDataDefaultTypeInternal;
extern TrackingDataDefaultTypeInternal _TrackingData_default_instance_;
}  // namespace willand_ackermann_proto
namespace google {
namespace protobuf {
template<> ::willand_ackermann_proto::ControlSignal* Arena::CreateMaybeMessage<::willand_ackermann_proto::ControlSignal>(Arena*);
template<> ::willand_ackermann_proto::ParamMPC* Arena::CreateMaybeMessage<::willand_ackermann_proto::ParamMPC>(Arena*);
template<> ::willand_ackermann_proto::State* Arena::CreateMaybeMessage<::willand_ackermann_proto::State>(Arena*);
template<> ::willand_ackermann_proto::TrackingData* Arena::CreateMaybeMessage<::willand_ackermann_proto::TrackingData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace willand_ackermann_proto {

// ===================================================================

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(State* other);
  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(NULL);
  }

  State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double theta = 3;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // double v = 4;
  void clear_v();
  static const int kVFieldNumber = 4;
  double v() const;
  void set_v(double value);

  // double omega = 5;
  void clear_omega();
  static const int kOmegaFieldNumber = 5;
  double omega() const;
  void set_omega(double value);

  // double kappa = 6;
  void clear_kappa();
  static const int kKappaFieldNumber = 6;
  double kappa() const;
  void set_kappa(double value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double theta_;
  double v_;
  double omega_;
  double kappa_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.ControlSignal) */ {
 public:
  ControlSignal();
  virtual ~ControlSignal();

  ControlSignal(const ControlSignal& from);

  inline ControlSignal& operator=(const ControlSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlSignal(ControlSignal&& from) noexcept
    : ControlSignal() {
    *this = ::std::move(from);
  }

  inline ControlSignal& operator=(ControlSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlSignal* internal_default_instance() {
    return reinterpret_cast<const ControlSignal*>(
               &_ControlSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ControlSignal* other);
  friend void swap(ControlSignal& a, ControlSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlSignal* New() const final {
    return CreateMaybeMessage<ControlSignal>(NULL);
  }

  ControlSignal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlSignal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlSignal& from);
  void MergeFrom(const ControlSignal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double v = 1;
  void clear_v();
  static const int kVFieldNumber = 1;
  double v() const;
  void set_v(double value);

  // double omega = 2;
  void clear_omega();
  static const int kOmegaFieldNumber = 2;
  double omega() const;
  void set_omega(double value);

  // double kappa = 3;
  void clear_kappa();
  static const int kKappaFieldNumber = 3;
  double kappa() const;
  void set_kappa(double value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.ControlSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double v_;
  double omega_;
  double kappa_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamMPC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.ParamMPC) */ {
 public:
  ParamMPC();
  virtual ~ParamMPC();

  ParamMPC(const ParamMPC& from);

  inline ParamMPC& operator=(const ParamMPC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamMPC(ParamMPC&& from) noexcept
    : ParamMPC() {
    *this = ::std::move(from);
  }

  inline ParamMPC& operator=(ParamMPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamMPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamMPC* internal_default_instance() {
    return reinterpret_cast<const ParamMPC*>(
               &_ParamMPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ParamMPC* other);
  friend void swap(ParamMPC& a, ParamMPC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamMPC* New() const final {
    return CreateMaybeMessage<ParamMPC>(NULL);
  }

  ParamMPC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParamMPC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParamMPC& from);
  void MergeFrom(const ParamMPC& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamMPC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double interval = 2;
  void clear_interval();
  static const int kIntervalFieldNumber = 2;
  double interval() const;
  void set_interval(double value);

  // uint32 horizon = 1;
  void clear_horizon();
  static const int kHorizonFieldNumber = 1;
  ::google::protobuf::uint32 horizon() const;
  void set_horizon(::google::protobuf::uint32 value);

  // uint32 state_dim = 3;
  void clear_state_dim();
  static const int kStateDimFieldNumber = 3;
  ::google::protobuf::uint32 state_dim() const;
  void set_state_dim(::google::protobuf::uint32 value);

  // double speed_limit = 5;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 5;
  double speed_limit() const;
  void set_speed_limit(double value);

  // double acc_limit = 6;
  void clear_acc_limit();
  static const int kAccLimitFieldNumber = 6;
  double acc_limit() const;
  void set_acc_limit(double value);

  // double front_wheel_angle_limit = 7;
  void clear_front_wheel_angle_limit();
  static const int kFrontWheelAngleLimitFieldNumber = 7;
  double front_wheel_angle_limit() const;
  void set_front_wheel_angle_limit(double value);

  // double front_wheel_angle_rate_limit = 8;
  void clear_front_wheel_angle_rate_limit();
  static const int kFrontWheelAngleRateLimitFieldNumber = 8;
  double front_wheel_angle_rate_limit() const;
  void set_front_wheel_angle_rate_limit(double value);

  // double track_width = 9;
  void clear_track_width();
  static const int kTrackWidthFieldNumber = 9;
  double track_width() const;
  void set_track_width(double value);

  // double dist_front_to_rear = 10;
  void clear_dist_front_to_rear();
  static const int kDistFrontToRearFieldNumber = 10;
  double dist_front_to_rear() const;
  void set_dist_front_to_rear(double value);

  // uint32 input_dim = 4;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  ::google::protobuf::uint32 input_dim() const;
  void set_input_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.ParamMPC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double interval_;
  ::google::protobuf::uint32 horizon_;
  ::google::protobuf::uint32 state_dim_;
  double speed_limit_;
  double acc_limit_;
  double front_wheel_angle_limit_;
  double front_wheel_angle_rate_limit_;
  double track_width_;
  double dist_front_to_rear_;
  ::google::protobuf::uint32 input_dim_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.TrackingData) */ {
 public:
  TrackingData();
  virtual ~TrackingData();

  TrackingData(const TrackingData& from);

  inline TrackingData& operator=(const TrackingData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackingData(TrackingData&& from) noexcept
    : TrackingData() {
    *this = ::std::move(from);
  }

  inline TrackingData& operator=(TrackingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingData* internal_default_instance() {
    return reinterpret_cast<const TrackingData*>(
               &_TrackingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TrackingData* other);
  friend void swap(TrackingData& a, TrackingData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackingData* New() const final {
    return CreateMaybeMessage<TrackingData>(NULL);
  }

  TrackingData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackingData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackingData& from);
  void MergeFrom(const TrackingData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string timestamp = 2;
  int timestamp_size() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::std::string& timestamp(int index) const;
  ::std::string* mutable_timestamp(int index);
  void set_timestamp(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(int index, ::std::string&& value);
  #endif
  void set_timestamp(int index, const char* value);
  void set_timestamp(int index, const char* value, size_t size);
  ::std::string* add_timestamp();
  void add_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void add_timestamp(::std::string&& value);
  #endif
  void add_timestamp(const char* value);
  void add_timestamp(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& timestamp() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_timestamp();

  // repeated .willand_ackermann_proto.State reference_data = 3;
  int reference_data_size() const;
  void clear_reference_data();
  static const int kReferenceDataFieldNumber = 3;
  ::willand_ackermann_proto::State* mutable_reference_data(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State >*
      mutable_reference_data();
  const ::willand_ackermann_proto::State& reference_data(int index) const;
  ::willand_ackermann_proto::State* add_reference_data();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State >&
      reference_data() const;

  // repeated .willand_ackermann_proto.State actual_data = 4;
  int actual_data_size() const;
  void clear_actual_data();
  static const int kActualDataFieldNumber = 4;
  ::willand_ackermann_proto::State* mutable_actual_data(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State >*
      mutable_actual_data();
  const ::willand_ackermann_proto::State& actual_data(int index) const;
  ::willand_ackermann_proto::State* add_actual_data();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State >&
      actual_data() const;

  // repeated .willand_ackermann_proto.ControlSignal control_signal = 5;
  int control_signal_size() const;
  void clear_control_signal();
  static const int kControlSignalFieldNumber = 5;
  ::willand_ackermann_proto::ControlSignal* mutable_control_signal(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlSignal >*
      mutable_control_signal();
  const ::willand_ackermann_proto::ControlSignal& control_signal(int index) const;
  ::willand_ackermann_proto::ControlSignal* add_control_signal();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlSignal >&
      control_signal() const;

  // .willand_ackermann_proto.ParamMPC mpc_param = 6;
  bool has_mpc_param() const;
  void clear_mpc_param();
  static const int kMpcParamFieldNumber = 6;
  private:
  const ::willand_ackermann_proto::ParamMPC& _internal_mpc_param() const;
  public:
  const ::willand_ackermann_proto::ParamMPC& mpc_param() const;
  ::willand_ackermann_proto::ParamMPC* release_mpc_param();
  ::willand_ackermann_proto::ParamMPC* mutable_mpc_param();
  void set_allocated_mpc_param(::willand_ackermann_proto::ParamMPC* mpc_param);

  // uint32 length = 1;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.TrackingData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> timestamp_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State > reference_data_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State > actual_data_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlSignal > control_signal_;
  ::willand_ackermann_proto::ParamMPC* mpc_param_;
  ::google::protobuf::uint32 length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// double x = 1;
inline void State::clear_x() {
  x_ = 0;
}
inline double State::x() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.State.x)
  return x_;
}
inline void State::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.State.x)
}

// double y = 2;
inline void State::clear_y() {
  y_ = 0;
}
inline double State::y() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.State.y)
  return y_;
}
inline void State::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.State.y)
}

// double theta = 3;
inline void State::clear_theta() {
  theta_ = 0;
}
inline double State::theta() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.State.theta)
  return theta_;
}
inline void State::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.State.theta)
}

// double v = 4;
inline void State::clear_v() {
  v_ = 0;
}
inline double State::v() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.State.v)
  return v_;
}
inline void State::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.State.v)
}

// double omega = 5;
inline void State::clear_omega() {
  omega_ = 0;
}
inline double State::omega() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.State.omega)
  return omega_;
}
inline void State::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.State.omega)
}

// double kappa = 6;
inline void State::clear_kappa() {
  kappa_ = 0;
}
inline double State::kappa() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.State.kappa)
  return kappa_;
}
inline void State::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.State.kappa)
}

// -------------------------------------------------------------------

// ControlSignal

// double v = 1;
inline void ControlSignal::clear_v() {
  v_ = 0;
}
inline double ControlSignal::v() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ControlSignal.v)
  return v_;
}
inline void ControlSignal::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ControlSignal.v)
}

// double omega = 2;
inline void ControlSignal::clear_omega() {
  omega_ = 0;
}
inline double ControlSignal::omega() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ControlSignal.omega)
  return omega_;
}
inline void ControlSignal::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ControlSignal.omega)
}

// double kappa = 3;
inline void ControlSignal::clear_kappa() {
  kappa_ = 0;
}
inline double ControlSignal::kappa() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ControlSignal.kappa)
  return kappa_;
}
inline void ControlSignal::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ControlSignal.kappa)
}

// -------------------------------------------------------------------

// ParamMPC

// uint32 horizon = 1;
inline void ParamMPC::clear_horizon() {
  horizon_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::horizon() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.horizon)
  return horizon_;
}
inline void ParamMPC::set_horizon(::google::protobuf::uint32 value) {
  
  horizon_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.horizon)
}

// double interval = 2;
inline void ParamMPC::clear_interval() {
  interval_ = 0;
}
inline double ParamMPC::interval() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.interval)
  return interval_;
}
inline void ParamMPC::set_interval(double value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.interval)
}

// uint32 state_dim = 3;
inline void ParamMPC::clear_state_dim() {
  state_dim_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::state_dim() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.state_dim)
  return state_dim_;
}
inline void ParamMPC::set_state_dim(::google::protobuf::uint32 value) {
  
  state_dim_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.state_dim)
}

// uint32 input_dim = 4;
inline void ParamMPC::clear_input_dim() {
  input_dim_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::input_dim() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.input_dim)
  return input_dim_;
}
inline void ParamMPC::set_input_dim(::google::protobuf::uint32 value) {
  
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.input_dim)
}

// double speed_limit = 5;
inline void ParamMPC::clear_speed_limit() {
  speed_limit_ = 0;
}
inline double ParamMPC::speed_limit() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.speed_limit)
  return speed_limit_;
}
inline void ParamMPC::set_speed_limit(double value) {
  
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.speed_limit)
}

// double acc_limit = 6;
inline void ParamMPC::clear_acc_limit() {
  acc_limit_ = 0;
}
inline double ParamMPC::acc_limit() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.acc_limit)
  return acc_limit_;
}
inline void ParamMPC::set_acc_limit(double value) {
  
  acc_limit_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.acc_limit)
}

// double front_wheel_angle_limit = 7;
inline void ParamMPC::clear_front_wheel_angle_limit() {
  front_wheel_angle_limit_ = 0;
}
inline double ParamMPC::front_wheel_angle_limit() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.front_wheel_angle_limit)
  return front_wheel_angle_limit_;
}
inline void ParamMPC::set_front_wheel_angle_limit(double value) {
  
  front_wheel_angle_limit_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.front_wheel_angle_limit)
}

// double front_wheel_angle_rate_limit = 8;
inline void ParamMPC::clear_front_wheel_angle_rate_limit() {
  front_wheel_angle_rate_limit_ = 0;
}
inline double ParamMPC::front_wheel_angle_rate_limit() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.front_wheel_angle_rate_limit)
  return front_wheel_angle_rate_limit_;
}
inline void ParamMPC::set_front_wheel_angle_rate_limit(double value) {
  
  front_wheel_angle_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.front_wheel_angle_rate_limit)
}

// double track_width = 9;
inline void ParamMPC::clear_track_width() {
  track_width_ = 0;
}
inline double ParamMPC::track_width() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.track_width)
  return track_width_;
}
inline void ParamMPC::set_track_width(double value) {
  
  track_width_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.track_width)
}

// double dist_front_to_rear = 10;
inline void ParamMPC::clear_dist_front_to_rear() {
  dist_front_to_rear_ = 0;
}
inline double ParamMPC::dist_front_to_rear() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.dist_front_to_rear)
  return dist_front_to_rear_;
}
inline void ParamMPC::set_dist_front_to_rear(double value) {
  
  dist_front_to_rear_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.dist_front_to_rear)
}

// -------------------------------------------------------------------

// TrackingData

// uint32 length = 1;
inline void TrackingData::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 TrackingData::length() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.length)
  return length_;
}
inline void TrackingData::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.TrackingData.length)
}

// repeated string timestamp = 2;
inline int TrackingData::timestamp_size() const {
  return timestamp_.size();
}
inline void TrackingData::clear_timestamp() {
  timestamp_.Clear();
}
inline const ::std::string& TrackingData::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Get(index);
}
inline ::std::string* TrackingData::mutable_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Mutable(index);
}
inline void TrackingData::set_timestamp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.TrackingData.timestamp)
  timestamp_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrackingData::set_timestamp(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.TrackingData.timestamp)
  timestamp_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrackingData::set_timestamp(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  timestamp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:willand_ackermann_proto.TrackingData.timestamp)
}
inline void TrackingData::set_timestamp(int index, const char* value, size_t size) {
  timestamp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:willand_ackermann_proto.TrackingData.timestamp)
}
inline ::std::string* TrackingData::add_timestamp() {
  // @@protoc_insertion_point(field_add_mutable:willand_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Add();
}
inline void TrackingData::add_timestamp(const ::std::string& value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.timestamp)
}
#if LANG_CXX11
inline void TrackingData::add_timestamp(::std::string&& value) {
  timestamp_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.timestamp)
}
#endif
inline void TrackingData::add_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:willand_ackermann_proto.TrackingData.timestamp)
}
inline void TrackingData::add_timestamp(const char* value, size_t size) {
  timestamp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:willand_ackermann_proto.TrackingData.timestamp)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackingData::timestamp() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.timestamp)
  return timestamp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackingData::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.timestamp)
  return &timestamp_;
}

// repeated .willand_ackermann_proto.State reference_data = 3;
inline int TrackingData::reference_data_size() const {
  return reference_data_.size();
}
inline void TrackingData::clear_reference_data() {
  reference_data_.Clear();
}
inline ::willand_ackermann_proto::State* TrackingData::mutable_reference_data(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State >*
TrackingData::mutable_reference_data() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.reference_data)
  return &reference_data_;
}
inline const ::willand_ackermann_proto::State& TrackingData::reference_data(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Get(index);
}
inline ::willand_ackermann_proto::State* TrackingData::add_reference_data() {
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State >&
TrackingData::reference_data() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.reference_data)
  return reference_data_;
}

// repeated .willand_ackermann_proto.State actual_data = 4;
inline int TrackingData::actual_data_size() const {
  return actual_data_.size();
}
inline void TrackingData::clear_actual_data() {
  actual_data_.Clear();
}
inline ::willand_ackermann_proto::State* TrackingData::mutable_actual_data(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State >*
TrackingData::mutable_actual_data() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.actual_data)
  return &actual_data_;
}
inline const ::willand_ackermann_proto::State& TrackingData::actual_data(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Get(index);
}
inline ::willand_ackermann_proto::State* TrackingData::add_actual_data() {
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::State >&
TrackingData::actual_data() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.actual_data)
  return actual_data_;
}

// repeated .willand_ackermann_proto.ControlSignal control_signal = 5;
inline int TrackingData::control_signal_size() const {
  return control_signal_.size();
}
inline void TrackingData::clear_control_signal() {
  control_signal_.Clear();
}
inline ::willand_ackermann_proto::ControlSignal* TrackingData::mutable_control_signal(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlSignal >*
TrackingData::mutable_control_signal() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.control_signal)
  return &control_signal_;
}
inline const ::willand_ackermann_proto::ControlSignal& TrackingData::control_signal(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Get(index);
}
inline ::willand_ackermann_proto::ControlSignal* TrackingData::add_control_signal() {
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlSignal >&
TrackingData::control_signal() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.control_signal)
  return control_signal_;
}

// .willand_ackermann_proto.ParamMPC mpc_param = 6;
inline bool TrackingData::has_mpc_param() const {
  return this != internal_default_instance() && mpc_param_ != NULL;
}
inline void TrackingData::clear_mpc_param() {
  if (GetArenaNoVirtual() == NULL && mpc_param_ != NULL) {
    delete mpc_param_;
  }
  mpc_param_ = NULL;
}
inline const ::willand_ackermann_proto::ParamMPC& TrackingData::_internal_mpc_param() const {
  return *mpc_param_;
}
inline const ::willand_ackermann_proto::ParamMPC& TrackingData::mpc_param() const {
  const ::willand_ackermann_proto::ParamMPC* p = mpc_param_;
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.mpc_param)
  return p != NULL ? *p : *reinterpret_cast<const ::willand_ackermann_proto::ParamMPC*>(
      &::willand_ackermann_proto::_ParamMPC_default_instance_);
}
inline ::willand_ackermann_proto::ParamMPC* TrackingData::release_mpc_param() {
  // @@protoc_insertion_point(field_release:willand_ackermann_proto.TrackingData.mpc_param)
  
  ::willand_ackermann_proto::ParamMPC* temp = mpc_param_;
  mpc_param_ = NULL;
  return temp;
}
inline ::willand_ackermann_proto::ParamMPC* TrackingData::mutable_mpc_param() {
  
  if (mpc_param_ == NULL) {
    auto* p = CreateMaybeMessage<::willand_ackermann_proto::ParamMPC>(GetArenaNoVirtual());
    mpc_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.mpc_param)
  return mpc_param_;
}
inline void TrackingData::set_allocated_mpc_param(::willand_ackermann_proto::ParamMPC* mpc_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mpc_param_;
  }
  if (mpc_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mpc_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mpc_param, submessage_arena);
    }
    
  } else {
    
  }
  mpc_param_ = mpc_param;
  // @@protoc_insertion_point(field_set_allocated:willand_ackermann_proto.TrackingData.mpc_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace willand_ackermann_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tracking_5fdata_2eproto
