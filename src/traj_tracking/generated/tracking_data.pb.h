// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking_data.proto

#ifndef PROTOBUF_tracking_5fdata_2eproto__INCLUDED
#define PROTOBUF_tracking_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace simple_ackermann_proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tracking_5fdata_2eproto();
void protobuf_AssignDesc_tracking_5fdata_2eproto();
void protobuf_ShutdownFile_tracking_5fdata_2eproto();

class ControlSignal;
class ParamMPC;
class State;
class TrackingData;

// ===================================================================

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simple_ackermann_proto.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  void Swap(State* other);

  // implements Message ----------------------------------------------

  inline State* New() const { return New(NULL); }

  State* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double theta = 3;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // optional double v = 4;
  void clear_v();
  static const int kVFieldNumber = 4;
  double v() const;
  void set_v(double value);

  // optional double omega = 5;
  void clear_omega();
  static const int kOmegaFieldNumber = 5;
  double omega() const;
  void set_omega(double value);

  // optional double kappa = 6;
  void clear_kappa();
  static const int kKappaFieldNumber = 6;
  double kappa() const;
  void set_kappa(double value);

  // @@protoc_insertion_point(class_scope:simple_ackermann_proto.State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double x_;
  double y_;
  double theta_;
  double v_;
  double omega_;
  double kappa_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tracking_5fdata_2eproto();
  friend void protobuf_AssignDesc_tracking_5fdata_2eproto();
  friend void protobuf_ShutdownFile_tracking_5fdata_2eproto();

  void InitAsDefaultInstance();
  static State* default_instance_;
};
// -------------------------------------------------------------------

class ControlSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simple_ackermann_proto.ControlSignal) */ {
 public:
  ControlSignal();
  virtual ~ControlSignal();

  ControlSignal(const ControlSignal& from);

  inline ControlSignal& operator=(const ControlSignal& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlSignal& default_instance();

  void Swap(ControlSignal* other);

  // implements Message ----------------------------------------------

  inline ControlSignal* New() const { return New(NULL); }

  ControlSignal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlSignal& from);
  void MergeFrom(const ControlSignal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double v = 1;
  void clear_v();
  static const int kVFieldNumber = 1;
  double v() const;
  void set_v(double value);

  // optional double omega = 2;
  void clear_omega();
  static const int kOmegaFieldNumber = 2;
  double omega() const;
  void set_omega(double value);

  // optional double kappa = 3;
  void clear_kappa();
  static const int kKappaFieldNumber = 3;
  double kappa() const;
  void set_kappa(double value);

  // @@protoc_insertion_point(class_scope:simple_ackermann_proto.ControlSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double v_;
  double omega_;
  double kappa_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tracking_5fdata_2eproto();
  friend void protobuf_AssignDesc_tracking_5fdata_2eproto();
  friend void protobuf_ShutdownFile_tracking_5fdata_2eproto();

  void InitAsDefaultInstance();
  static ControlSignal* default_instance_;
};
// -------------------------------------------------------------------

class ParamMPC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simple_ackermann_proto.ParamMPC) */ {
 public:
  ParamMPC();
  virtual ~ParamMPC();

  ParamMPC(const ParamMPC& from);

  inline ParamMPC& operator=(const ParamMPC& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamMPC& default_instance();

  void Swap(ParamMPC* other);

  // implements Message ----------------------------------------------

  inline ParamMPC* New() const { return New(NULL); }

  ParamMPC* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamMPC& from);
  void MergeFrom(const ParamMPC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParamMPC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 horizon = 1;
  void clear_horizon();
  static const int kHorizonFieldNumber = 1;
  ::google::protobuf::uint32 horizon() const;
  void set_horizon(::google::protobuf::uint32 value);

  // optional double interval = 2;
  void clear_interval();
  static const int kIntervalFieldNumber = 2;
  double interval() const;
  void set_interval(double value);

  // optional uint32 state_dim = 3;
  void clear_state_dim();
  static const int kStateDimFieldNumber = 3;
  ::google::protobuf::uint32 state_dim() const;
  void set_state_dim(::google::protobuf::uint32 value);

  // optional uint32 input_dim = 4;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  ::google::protobuf::uint32 input_dim() const;
  void set_input_dim(::google::protobuf::uint32 value);

  // optional double max_vel = 5;
  void clear_max_vel();
  static const int kMaxVelFieldNumber = 5;
  double max_vel() const;
  void set_max_vel(double value);

  // optional double min_vel = 6;
  void clear_min_vel();
  static const int kMinVelFieldNumber = 6;
  double min_vel() const;
  void set_min_vel(double value);

  // optional double max_acc = 7;
  void clear_max_acc();
  static const int kMaxAccFieldNumber = 7;
  double max_acc() const;
  void set_max_acc(double value);

  // optional double min_acc = 8;
  void clear_min_acc();
  static const int kMinAccFieldNumber = 8;
  double min_acc() const;
  void set_min_acc(double value);

  // optional double steer_angle_rate_limit = 9;
  void clear_steer_angle_rate_limit();
  static const int kSteerAngleRateLimitFieldNumber = 9;
  double steer_angle_rate_limit() const;
  void set_steer_angle_rate_limit(double value);

  // optional double min_turn_radius = 10;
  void clear_min_turn_radius();
  static const int kMinTurnRadiusFieldNumber = 10;
  double min_turn_radius() const;
  void set_min_turn_radius(double value);

  // optional double track_width = 11;
  void clear_track_width();
  static const int kTrackWidthFieldNumber = 11;
  double track_width() const;
  void set_track_width(double value);

  // optional double wheel_base = 12;
  void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 12;
  double wheel_base() const;
  void set_wheel_base(double value);

  // @@protoc_insertion_point(class_scope:simple_ackermann_proto.ParamMPC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double interval_;
  ::google::protobuf::uint32 horizon_;
  ::google::protobuf::uint32 state_dim_;
  double max_vel_;
  double min_vel_;
  double max_acc_;
  double min_acc_;
  double steer_angle_rate_limit_;
  double min_turn_radius_;
  double track_width_;
  double wheel_base_;
  ::google::protobuf::uint32 input_dim_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tracking_5fdata_2eproto();
  friend void protobuf_AssignDesc_tracking_5fdata_2eproto();
  friend void protobuf_ShutdownFile_tracking_5fdata_2eproto();

  void InitAsDefaultInstance();
  static ParamMPC* default_instance_;
};
// -------------------------------------------------------------------

class TrackingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simple_ackermann_proto.TrackingData) */ {
 public:
  TrackingData();
  virtual ~TrackingData();

  TrackingData(const TrackingData& from);

  inline TrackingData& operator=(const TrackingData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackingData& default_instance();

  void Swap(TrackingData* other);

  // implements Message ----------------------------------------------

  inline TrackingData* New() const { return New(NULL); }

  TrackingData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackingData& from);
  void MergeFrom(const TrackingData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 length = 1;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // repeated string timestamp = 2;
  int timestamp_size() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::std::string& timestamp(int index) const;
  ::std::string* mutable_timestamp(int index);
  void set_timestamp(int index, const ::std::string& value);
  void set_timestamp(int index, const char* value);
  void set_timestamp(int index, const char* value, size_t size);
  ::std::string* add_timestamp();
  void add_timestamp(const ::std::string& value);
  void add_timestamp(const char* value);
  void add_timestamp(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& timestamp() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_timestamp();

  // repeated .simple_ackermann_proto.State reference_data = 3;
  int reference_data_size() const;
  void clear_reference_data();
  static const int kReferenceDataFieldNumber = 3;
  const ::simple_ackermann_proto::State& reference_data(int index) const;
  ::simple_ackermann_proto::State* mutable_reference_data(int index);
  ::simple_ackermann_proto::State* add_reference_data();
  ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >*
      mutable_reference_data();
  const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >&
      reference_data() const;

  // repeated .simple_ackermann_proto.State actual_data = 4;
  int actual_data_size() const;
  void clear_actual_data();
  static const int kActualDataFieldNumber = 4;
  const ::simple_ackermann_proto::State& actual_data(int index) const;
  ::simple_ackermann_proto::State* mutable_actual_data(int index);
  ::simple_ackermann_proto::State* add_actual_data();
  ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >*
      mutable_actual_data();
  const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >&
      actual_data() const;

  // repeated .simple_ackermann_proto.ControlSignal control_signal = 5;
  int control_signal_size() const;
  void clear_control_signal();
  static const int kControlSignalFieldNumber = 5;
  const ::simple_ackermann_proto::ControlSignal& control_signal(int index) const;
  ::simple_ackermann_proto::ControlSignal* mutable_control_signal(int index);
  ::simple_ackermann_proto::ControlSignal* add_control_signal();
  ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::ControlSignal >*
      mutable_control_signal();
  const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::ControlSignal >&
      control_signal() const;

  // optional .simple_ackermann_proto.ParamMPC mpc_param = 6;
  bool has_mpc_param() const;
  void clear_mpc_param();
  static const int kMpcParamFieldNumber = 6;
  const ::simple_ackermann_proto::ParamMPC& mpc_param() const;
  ::simple_ackermann_proto::ParamMPC* mutable_mpc_param();
  ::simple_ackermann_proto::ParamMPC* release_mpc_param();
  void set_allocated_mpc_param(::simple_ackermann_proto::ParamMPC* mpc_param);

  // @@protoc_insertion_point(class_scope:simple_ackermann_proto.TrackingData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> timestamp_;
  ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State > reference_data_;
  ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State > actual_data_;
  ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::ControlSignal > control_signal_;
  ::simple_ackermann_proto::ParamMPC* mpc_param_;
  ::google::protobuf::uint32 length_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_tracking_5fdata_2eproto();
  friend void protobuf_AssignDesc_tracking_5fdata_2eproto();
  friend void protobuf_ShutdownFile_tracking_5fdata_2eproto();

  void InitAsDefaultInstance();
  static TrackingData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// State

// optional double x = 1;
inline void State::clear_x() {
  x_ = 0;
}
inline double State::x() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.x)
  return x_;
}
inline void State::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.x)
}

// optional double y = 2;
inline void State::clear_y() {
  y_ = 0;
}
inline double State::y() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.y)
  return y_;
}
inline void State::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.y)
}

// optional double theta = 3;
inline void State::clear_theta() {
  theta_ = 0;
}
inline double State::theta() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.theta)
  return theta_;
}
inline void State::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.theta)
}

// optional double v = 4;
inline void State::clear_v() {
  v_ = 0;
}
inline double State::v() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.v)
  return v_;
}
inline void State::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.v)
}

// optional double omega = 5;
inline void State::clear_omega() {
  omega_ = 0;
}
inline double State::omega() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.omega)
  return omega_;
}
inline void State::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.omega)
}

// optional double kappa = 6;
inline void State::clear_kappa() {
  kappa_ = 0;
}
inline double State::kappa() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.State.kappa)
  return kappa_;
}
inline void State::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.State.kappa)
}

// -------------------------------------------------------------------

// ControlSignal

// optional double v = 1;
inline void ControlSignal::clear_v() {
  v_ = 0;
}
inline double ControlSignal::v() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ControlSignal.v)
  return v_;
}
inline void ControlSignal::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ControlSignal.v)
}

// optional double omega = 2;
inline void ControlSignal::clear_omega() {
  omega_ = 0;
}
inline double ControlSignal::omega() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ControlSignal.omega)
  return omega_;
}
inline void ControlSignal::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ControlSignal.omega)
}

// optional double kappa = 3;
inline void ControlSignal::clear_kappa() {
  kappa_ = 0;
}
inline double ControlSignal::kappa() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ControlSignal.kappa)
  return kappa_;
}
inline void ControlSignal::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ControlSignal.kappa)
}

// -------------------------------------------------------------------

// ParamMPC

// optional uint32 horizon = 1;
inline void ParamMPC::clear_horizon() {
  horizon_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::horizon() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.horizon)
  return horizon_;
}
inline void ParamMPC::set_horizon(::google::protobuf::uint32 value) {
  
  horizon_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.horizon)
}

// optional double interval = 2;
inline void ParamMPC::clear_interval() {
  interval_ = 0;
}
inline double ParamMPC::interval() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.interval)
  return interval_;
}
inline void ParamMPC::set_interval(double value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.interval)
}

// optional uint32 state_dim = 3;
inline void ParamMPC::clear_state_dim() {
  state_dim_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::state_dim() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.state_dim)
  return state_dim_;
}
inline void ParamMPC::set_state_dim(::google::protobuf::uint32 value) {
  
  state_dim_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.state_dim)
}

// optional uint32 input_dim = 4;
inline void ParamMPC::clear_input_dim() {
  input_dim_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::input_dim() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.input_dim)
  return input_dim_;
}
inline void ParamMPC::set_input_dim(::google::protobuf::uint32 value) {
  
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.input_dim)
}

// optional double max_vel = 5;
inline void ParamMPC::clear_max_vel() {
  max_vel_ = 0;
}
inline double ParamMPC::max_vel() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.max_vel)
  return max_vel_;
}
inline void ParamMPC::set_max_vel(double value) {
  
  max_vel_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.max_vel)
}

// optional double min_vel = 6;
inline void ParamMPC::clear_min_vel() {
  min_vel_ = 0;
}
inline double ParamMPC::min_vel() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.min_vel)
  return min_vel_;
}
inline void ParamMPC::set_min_vel(double value) {
  
  min_vel_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.min_vel)
}

// optional double max_acc = 7;
inline void ParamMPC::clear_max_acc() {
  max_acc_ = 0;
}
inline double ParamMPC::max_acc() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.max_acc)
  return max_acc_;
}
inline void ParamMPC::set_max_acc(double value) {
  
  max_acc_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.max_acc)
}

// optional double min_acc = 8;
inline void ParamMPC::clear_min_acc() {
  min_acc_ = 0;
}
inline double ParamMPC::min_acc() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.min_acc)
  return min_acc_;
}
inline void ParamMPC::set_min_acc(double value) {
  
  min_acc_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.min_acc)
}

// optional double steer_angle_rate_limit = 9;
inline void ParamMPC::clear_steer_angle_rate_limit() {
  steer_angle_rate_limit_ = 0;
}
inline double ParamMPC::steer_angle_rate_limit() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.steer_angle_rate_limit)
  return steer_angle_rate_limit_;
}
inline void ParamMPC::set_steer_angle_rate_limit(double value) {
  
  steer_angle_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.steer_angle_rate_limit)
}

// optional double min_turn_radius = 10;
inline void ParamMPC::clear_min_turn_radius() {
  min_turn_radius_ = 0;
}
inline double ParamMPC::min_turn_radius() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.min_turn_radius)
  return min_turn_radius_;
}
inline void ParamMPC::set_min_turn_radius(double value) {
  
  min_turn_radius_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.min_turn_radius)
}

// optional double track_width = 11;
inline void ParamMPC::clear_track_width() {
  track_width_ = 0;
}
inline double ParamMPC::track_width() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.track_width)
  return track_width_;
}
inline void ParamMPC::set_track_width(double value) {
  
  track_width_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.track_width)
}

// optional double wheel_base = 12;
inline void ParamMPC::clear_wheel_base() {
  wheel_base_ = 0;
}
inline double ParamMPC::wheel_base() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.ParamMPC.wheel_base)
  return wheel_base_;
}
inline void ParamMPC::set_wheel_base(double value) {
  
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.ParamMPC.wheel_base)
}

// -------------------------------------------------------------------

// TrackingData

// optional uint32 length = 1;
inline void TrackingData::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 TrackingData::length() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.length)
  return length_;
}
inline void TrackingData::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.TrackingData.length)
}

// repeated string timestamp = 2;
inline int TrackingData::timestamp_size() const {
  return timestamp_.size();
}
inline void TrackingData::clear_timestamp() {
  timestamp_.Clear();
}
inline const ::std::string& TrackingData::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Get(index);
}
inline ::std::string* TrackingData::mutable_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Mutable(index);
}
inline void TrackingData::set_timestamp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:simple_ackermann_proto.TrackingData.timestamp)
  timestamp_.Mutable(index)->assign(value);
}
inline void TrackingData::set_timestamp(int index, const char* value) {
  timestamp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simple_ackermann_proto.TrackingData.timestamp)
}
inline void TrackingData::set_timestamp(int index, const char* value, size_t size) {
  timestamp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simple_ackermann_proto.TrackingData.timestamp)
}
inline ::std::string* TrackingData::add_timestamp() {
  // @@protoc_insertion_point(field_add_mutable:simple_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Add();
}
inline void TrackingData::add_timestamp(const ::std::string& value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simple_ackermann_proto.TrackingData.timestamp)
}
inline void TrackingData::add_timestamp(const char* value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simple_ackermann_proto.TrackingData.timestamp)
}
inline void TrackingData::add_timestamp(const char* value, size_t size) {
  timestamp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simple_ackermann_proto.TrackingData.timestamp)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackingData::timestamp() const {
  // @@protoc_insertion_point(field_list:simple_ackermann_proto.TrackingData.timestamp)
  return timestamp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackingData::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:simple_ackermann_proto.TrackingData.timestamp)
  return &timestamp_;
}

// repeated .simple_ackermann_proto.State reference_data = 3;
inline int TrackingData::reference_data_size() const {
  return reference_data_.size();
}
inline void TrackingData::clear_reference_data() {
  reference_data_.Clear();
}
inline const ::simple_ackermann_proto::State& TrackingData::reference_data(int index) const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Get(index);
}
inline ::simple_ackermann_proto::State* TrackingData::mutable_reference_data(int index) {
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Mutable(index);
}
inline ::simple_ackermann_proto::State* TrackingData::add_reference_data() {
  // @@protoc_insertion_point(field_add:simple_ackermann_proto.TrackingData.reference_data)
  return reference_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >*
TrackingData::mutable_reference_data() {
  // @@protoc_insertion_point(field_mutable_list:simple_ackermann_proto.TrackingData.reference_data)
  return &reference_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >&
TrackingData::reference_data() const {
  // @@protoc_insertion_point(field_list:simple_ackermann_proto.TrackingData.reference_data)
  return reference_data_;
}

// repeated .simple_ackermann_proto.State actual_data = 4;
inline int TrackingData::actual_data_size() const {
  return actual_data_.size();
}
inline void TrackingData::clear_actual_data() {
  actual_data_.Clear();
}
inline const ::simple_ackermann_proto::State& TrackingData::actual_data(int index) const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Get(index);
}
inline ::simple_ackermann_proto::State* TrackingData::mutable_actual_data(int index) {
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Mutable(index);
}
inline ::simple_ackermann_proto::State* TrackingData::add_actual_data() {
  // @@protoc_insertion_point(field_add:simple_ackermann_proto.TrackingData.actual_data)
  return actual_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >*
TrackingData::mutable_actual_data() {
  // @@protoc_insertion_point(field_mutable_list:simple_ackermann_proto.TrackingData.actual_data)
  return &actual_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::State >&
TrackingData::actual_data() const {
  // @@protoc_insertion_point(field_list:simple_ackermann_proto.TrackingData.actual_data)
  return actual_data_;
}

// repeated .simple_ackermann_proto.ControlSignal control_signal = 5;
inline int TrackingData::control_signal_size() const {
  return control_signal_.size();
}
inline void TrackingData::clear_control_signal() {
  control_signal_.Clear();
}
inline const ::simple_ackermann_proto::ControlSignal& TrackingData::control_signal(int index) const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Get(index);
}
inline ::simple_ackermann_proto::ControlSignal* TrackingData::mutable_control_signal(int index) {
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Mutable(index);
}
inline ::simple_ackermann_proto::ControlSignal* TrackingData::add_control_signal() {
  // @@protoc_insertion_point(field_add:simple_ackermann_proto.TrackingData.control_signal)
  return control_signal_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::ControlSignal >*
TrackingData::mutable_control_signal() {
  // @@protoc_insertion_point(field_mutable_list:simple_ackermann_proto.TrackingData.control_signal)
  return &control_signal_;
}
inline const ::google::protobuf::RepeatedPtrField< ::simple_ackermann_proto::ControlSignal >&
TrackingData::control_signal() const {
  // @@protoc_insertion_point(field_list:simple_ackermann_proto.TrackingData.control_signal)
  return control_signal_;
}

// optional .simple_ackermann_proto.ParamMPC mpc_param = 6;
inline bool TrackingData::has_mpc_param() const {
  return !_is_default_instance_ && mpc_param_ != NULL;
}
inline void TrackingData::clear_mpc_param() {
  if (GetArenaNoVirtual() == NULL && mpc_param_ != NULL) delete mpc_param_;
  mpc_param_ = NULL;
}
inline const ::simple_ackermann_proto::ParamMPC& TrackingData::mpc_param() const {
  // @@protoc_insertion_point(field_get:simple_ackermann_proto.TrackingData.mpc_param)
  return mpc_param_ != NULL ? *mpc_param_ : *default_instance_->mpc_param_;
}
inline ::simple_ackermann_proto::ParamMPC* TrackingData::mutable_mpc_param() {
  
  if (mpc_param_ == NULL) {
    mpc_param_ = new ::simple_ackermann_proto::ParamMPC;
  }
  // @@protoc_insertion_point(field_mutable:simple_ackermann_proto.TrackingData.mpc_param)
  return mpc_param_;
}
inline ::simple_ackermann_proto::ParamMPC* TrackingData::release_mpc_param() {
  // @@protoc_insertion_point(field_release:simple_ackermann_proto.TrackingData.mpc_param)
  
  ::simple_ackermann_proto::ParamMPC* temp = mpc_param_;
  mpc_param_ = NULL;
  return temp;
}
inline void TrackingData::set_allocated_mpc_param(::simple_ackermann_proto::ParamMPC* mpc_param) {
  delete mpc_param_;
  mpc_param_ = mpc_param;
  if (mpc_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:simple_ackermann_proto.TrackingData.mpc_param)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace simple_ackermann_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tracking_5fdata_2eproto__INCLUDED
