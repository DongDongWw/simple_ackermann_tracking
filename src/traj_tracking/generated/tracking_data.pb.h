// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracking_data.proto

#ifndef PROTOBUF_INCLUDED_tracking_5fdata_2eproto
#define PROTOBUF_INCLUDED_tracking_5fdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tracking_5fdata_2eproto 

namespace protobuf_tracking_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tracking_5fdata_2eproto
namespace willand_ackermann_proto {
class ControlType;
class ControlTypeDefaultTypeInternal;
extern ControlTypeDefaultTypeInternal _ControlType_default_instance_;
class ParamMPC;
class ParamMPCDefaultTypeInternal;
extern ParamMPCDefaultTypeInternal _ParamMPC_default_instance_;
class PointType;
class PointTypeDefaultTypeInternal;
extern PointTypeDefaultTypeInternal _PointType_default_instance_;
class StateType;
class StateTypeDefaultTypeInternal;
extern StateTypeDefaultTypeInternal _StateType_default_instance_;
class TrackingData;
class TrackingDataDefaultTypeInternal;
extern TrackingDataDefaultTypeInternal _TrackingData_default_instance_;
}  // namespace willand_ackermann_proto
namespace google {
namespace protobuf {
template<> ::willand_ackermann_proto::ControlType* Arena::CreateMaybeMessage<::willand_ackermann_proto::ControlType>(Arena*);
template<> ::willand_ackermann_proto::ParamMPC* Arena::CreateMaybeMessage<::willand_ackermann_proto::ParamMPC>(Arena*);
template<> ::willand_ackermann_proto::PointType* Arena::CreateMaybeMessage<::willand_ackermann_proto::PointType>(Arena*);
template<> ::willand_ackermann_proto::StateType* Arena::CreateMaybeMessage<::willand_ackermann_proto::StateType>(Arena*);
template<> ::willand_ackermann_proto::TrackingData* Arena::CreateMaybeMessage<::willand_ackermann_proto::TrackingData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace willand_ackermann_proto {

// ===================================================================

class ParamMPC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.ParamMPC) */ {
 public:
  ParamMPC();
  virtual ~ParamMPC();

  ParamMPC(const ParamMPC& from);

  inline ParamMPC& operator=(const ParamMPC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamMPC(ParamMPC&& from) noexcept
    : ParamMPC() {
    *this = ::std::move(from);
  }

  inline ParamMPC& operator=(ParamMPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamMPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamMPC* internal_default_instance() {
    return reinterpret_cast<const ParamMPC*>(
               &_ParamMPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ParamMPC* other);
  friend void swap(ParamMPC& a, ParamMPC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamMPC* New() const final {
    return CreateMaybeMessage<ParamMPC>(NULL);
  }

  ParamMPC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParamMPC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParamMPC& from);
  void MergeFrom(const ParamMPC& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamMPC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double interval = 2;
  void clear_interval();
  static const int kIntervalFieldNumber = 2;
  double interval() const;
  void set_interval(double value);

  // uint32 horizon = 1;
  void clear_horizon();
  static const int kHorizonFieldNumber = 1;
  ::google::protobuf::uint32 horizon() const;
  void set_horizon(::google::protobuf::uint32 value);

  // uint32 state_dim = 3;
  void clear_state_dim();
  static const int kStateDimFieldNumber = 3;
  ::google::protobuf::uint32 state_dim() const;
  void set_state_dim(::google::protobuf::uint32 value);

  // double min_vel = 5;
  void clear_min_vel();
  static const int kMinVelFieldNumber = 5;
  double min_vel() const;
  void set_min_vel(double value);

  // double max_vel = 6;
  void clear_max_vel();
  static const int kMaxVelFieldNumber = 6;
  double max_vel() const;
  void set_max_vel(double value);

  // double min_acc = 7;
  void clear_min_acc();
  static const int kMinAccFieldNumber = 7;
  double min_acc() const;
  void set_min_acc(double value);

  // double max_acc = 8;
  void clear_max_acc();
  static const int kMaxAccFieldNumber = 8;
  double max_acc() const;
  void set_max_acc(double value);

  // double steer_angle_rate_limit = 9;
  void clear_steer_angle_rate_limit();
  static const int kSteerAngleRateLimitFieldNumber = 9;
  double steer_angle_rate_limit() const;
  void set_steer_angle_rate_limit(double value);

  // double track_width = 10;
  void clear_track_width();
  static const int kTrackWidthFieldNumber = 10;
  double track_width() const;
  void set_track_width(double value);

  // double wheel_base = 11;
  void clear_wheel_base();
  static const int kWheelBaseFieldNumber = 11;
  double wheel_base() const;
  void set_wheel_base(double value);

  // uint32 input_dim = 4;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  ::google::protobuf::uint32 input_dim() const;
  void set_input_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.ParamMPC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double interval_;
  ::google::protobuf::uint32 horizon_;
  ::google::protobuf::uint32 state_dim_;
  double min_vel_;
  double max_vel_;
  double min_acc_;
  double max_acc_;
  double steer_angle_rate_limit_;
  double track_width_;
  double wheel_base_;
  ::google::protobuf::uint32 input_dim_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StateType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.StateType) */ {
 public:
  StateType();
  virtual ~StateType();

  StateType(const StateType& from);

  inline StateType& operator=(const StateType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateType(StateType&& from) noexcept
    : StateType() {
    *this = ::std::move(from);
  }

  inline StateType& operator=(StateType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateType* internal_default_instance() {
    return reinterpret_cast<const StateType*>(
               &_StateType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(StateType* other);
  friend void swap(StateType& a, StateType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateType* New() const final {
    return CreateMaybeMessage<StateType>(NULL);
  }

  StateType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateType& from);
  void MergeFrom(const StateType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double theta = 3;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.StateType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double theta_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ControlType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.ControlType) */ {
 public:
  ControlType();
  virtual ~ControlType();

  ControlType(const ControlType& from);

  inline ControlType& operator=(const ControlType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlType(ControlType&& from) noexcept
    : ControlType() {
    *this = ::std::move(from);
  }

  inline ControlType& operator=(ControlType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlType* internal_default_instance() {
    return reinterpret_cast<const ControlType*>(
               &_ControlType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ControlType* other);
  friend void swap(ControlType& a, ControlType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlType* New() const final {
    return CreateMaybeMessage<ControlType>(NULL);
  }

  ControlType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlType& from);
  void MergeFrom(const ControlType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double v = 1;
  void clear_v();
  static const int kVFieldNumber = 1;
  double v() const;
  void set_v(double value);

  // double omega = 2;
  void clear_omega();
  static const int kOmegaFieldNumber = 2;
  double omega() const;
  void set_omega(double value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.ControlType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double v_;
  double omega_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.PointType) */ {
 public:
  PointType();
  virtual ~PointType();

  PointType(const PointType& from);

  inline PointType& operator=(const PointType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointType(PointType&& from) noexcept
    : PointType() {
    *this = ::std::move(from);
  }

  inline PointType& operator=(PointType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointType* internal_default_instance() {
    return reinterpret_cast<const PointType*>(
               &_PointType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PointType* other);
  friend void swap(PointType& a, PointType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointType* New() const final {
    return CreateMaybeMessage<PointType>(NULL);
  }

  PointType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointType& from);
  void MergeFrom(const PointType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.PointType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrackingData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:willand_ackermann_proto.TrackingData) */ {
 public:
  TrackingData();
  virtual ~TrackingData();

  TrackingData(const TrackingData& from);

  inline TrackingData& operator=(const TrackingData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrackingData(TrackingData&& from) noexcept
    : TrackingData() {
    *this = ::std::move(from);
  }

  inline TrackingData& operator=(TrackingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackingData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackingData* internal_default_instance() {
    return reinterpret_cast<const TrackingData*>(
               &_TrackingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TrackingData* other);
  friend void swap(TrackingData& a, TrackingData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrackingData* New() const final {
    return CreateMaybeMessage<TrackingData>(NULL);
  }

  TrackingData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrackingData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrackingData& from);
  void MergeFrom(const TrackingData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackingData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 timestamp = 3;
  int timestamp_size() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::uint32 timestamp(int index) const;
  void set_timestamp(int index, ::google::protobuf::uint32 value);
  void add_timestamp(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      timestamp() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_timestamp();

  // repeated .willand_ackermann_proto.StateType refer_state = 4;
  int refer_state_size() const;
  void clear_refer_state();
  static const int kReferStateFieldNumber = 4;
  ::willand_ackermann_proto::StateType* mutable_refer_state(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType >*
      mutable_refer_state();
  const ::willand_ackermann_proto::StateType& refer_state(int index) const;
  ::willand_ackermann_proto::StateType* add_refer_state();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType >&
      refer_state() const;

  // repeated .willand_ackermann_proto.StateType actual_state = 5;
  int actual_state_size() const;
  void clear_actual_state();
  static const int kActualStateFieldNumber = 5;
  ::willand_ackermann_proto::StateType* mutable_actual_state(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType >*
      mutable_actual_state();
  const ::willand_ackermann_proto::StateType& actual_state(int index) const;
  ::willand_ackermann_proto::StateType* add_actual_state();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType >&
      actual_state() const;

  // repeated .willand_ackermann_proto.ControlType ctrl_cmd = 6;
  int ctrl_cmd_size() const;
  void clear_ctrl_cmd();
  static const int kCtrlCmdFieldNumber = 6;
  ::willand_ackermann_proto::ControlType* mutable_ctrl_cmd(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlType >*
      mutable_ctrl_cmd();
  const ::willand_ackermann_proto::ControlType& ctrl_cmd(int index) const;
  ::willand_ackermann_proto::ControlType* add_ctrl_cmd();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlType >&
      ctrl_cmd() const;

  // repeated .willand_ackermann_proto.PointType global_point = 7;
  int global_point_size() const;
  void clear_global_point();
  static const int kGlobalPointFieldNumber = 7;
  ::willand_ackermann_proto::PointType* mutable_global_point(int index);
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::PointType >*
      mutable_global_point();
  const ::willand_ackermann_proto::PointType& global_point(int index) const;
  ::willand_ackermann_proto::PointType* add_global_point();
  const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::PointType >&
      global_point() const;

  // .willand_ackermann_proto.ParamMPC mpc_param = 1;
  bool has_mpc_param() const;
  void clear_mpc_param();
  static const int kMpcParamFieldNumber = 1;
  private:
  const ::willand_ackermann_proto::ParamMPC& _internal_mpc_param() const;
  public:
  const ::willand_ackermann_proto::ParamMPC& mpc_param() const;
  ::willand_ackermann_proto::ParamMPC* release_mpc_param();
  ::willand_ackermann_proto::ParamMPC* mutable_mpc_param();
  void set_allocated_mpc_param(::willand_ackermann_proto::ParamMPC* mpc_param);

  // uint32 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint32 length() const;
  void set_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:willand_ackermann_proto.TrackingData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > timestamp_;
  mutable int _timestamp_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType > refer_state_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType > actual_state_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlType > ctrl_cmd_;
  ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::PointType > global_point_;
  ::willand_ackermann_proto::ParamMPC* mpc_param_;
  ::google::protobuf::uint32 length_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_tracking_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParamMPC

// uint32 horizon = 1;
inline void ParamMPC::clear_horizon() {
  horizon_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::horizon() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.horizon)
  return horizon_;
}
inline void ParamMPC::set_horizon(::google::protobuf::uint32 value) {
  
  horizon_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.horizon)
}

// double interval = 2;
inline void ParamMPC::clear_interval() {
  interval_ = 0;
}
inline double ParamMPC::interval() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.interval)
  return interval_;
}
inline void ParamMPC::set_interval(double value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.interval)
}

// uint32 state_dim = 3;
inline void ParamMPC::clear_state_dim() {
  state_dim_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::state_dim() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.state_dim)
  return state_dim_;
}
inline void ParamMPC::set_state_dim(::google::protobuf::uint32 value) {
  
  state_dim_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.state_dim)
}

// uint32 input_dim = 4;
inline void ParamMPC::clear_input_dim() {
  input_dim_ = 0u;
}
inline ::google::protobuf::uint32 ParamMPC::input_dim() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.input_dim)
  return input_dim_;
}
inline void ParamMPC::set_input_dim(::google::protobuf::uint32 value) {
  
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.input_dim)
}

// double min_vel = 5;
inline void ParamMPC::clear_min_vel() {
  min_vel_ = 0;
}
inline double ParamMPC::min_vel() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.min_vel)
  return min_vel_;
}
inline void ParamMPC::set_min_vel(double value) {
  
  min_vel_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.min_vel)
}

// double max_vel = 6;
inline void ParamMPC::clear_max_vel() {
  max_vel_ = 0;
}
inline double ParamMPC::max_vel() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.max_vel)
  return max_vel_;
}
inline void ParamMPC::set_max_vel(double value) {
  
  max_vel_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.max_vel)
}

// double min_acc = 7;
inline void ParamMPC::clear_min_acc() {
  min_acc_ = 0;
}
inline double ParamMPC::min_acc() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.min_acc)
  return min_acc_;
}
inline void ParamMPC::set_min_acc(double value) {
  
  min_acc_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.min_acc)
}

// double max_acc = 8;
inline void ParamMPC::clear_max_acc() {
  max_acc_ = 0;
}
inline double ParamMPC::max_acc() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.max_acc)
  return max_acc_;
}
inline void ParamMPC::set_max_acc(double value) {
  
  max_acc_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.max_acc)
}

// double steer_angle_rate_limit = 9;
inline void ParamMPC::clear_steer_angle_rate_limit() {
  steer_angle_rate_limit_ = 0;
}
inline double ParamMPC::steer_angle_rate_limit() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.steer_angle_rate_limit)
  return steer_angle_rate_limit_;
}
inline void ParamMPC::set_steer_angle_rate_limit(double value) {
  
  steer_angle_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.steer_angle_rate_limit)
}

// double track_width = 10;
inline void ParamMPC::clear_track_width() {
  track_width_ = 0;
}
inline double ParamMPC::track_width() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.track_width)
  return track_width_;
}
inline void ParamMPC::set_track_width(double value) {
  
  track_width_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.track_width)
}

// double wheel_base = 11;
inline void ParamMPC::clear_wheel_base() {
  wheel_base_ = 0;
}
inline double ParamMPC::wheel_base() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ParamMPC.wheel_base)
  return wheel_base_;
}
inline void ParamMPC::set_wheel_base(double value) {
  
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ParamMPC.wheel_base)
}

// -------------------------------------------------------------------

// StateType

// double x = 1;
inline void StateType::clear_x() {
  x_ = 0;
}
inline double StateType::x() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.StateType.x)
  return x_;
}
inline void StateType::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.StateType.x)
}

// double y = 2;
inline void StateType::clear_y() {
  y_ = 0;
}
inline double StateType::y() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.StateType.y)
  return y_;
}
inline void StateType::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.StateType.y)
}

// double theta = 3;
inline void StateType::clear_theta() {
  theta_ = 0;
}
inline double StateType::theta() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.StateType.theta)
  return theta_;
}
inline void StateType::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.StateType.theta)
}

// -------------------------------------------------------------------

// ControlType

// double v = 1;
inline void ControlType::clear_v() {
  v_ = 0;
}
inline double ControlType::v() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ControlType.v)
  return v_;
}
inline void ControlType::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ControlType.v)
}

// double omega = 2;
inline void ControlType::clear_omega() {
  omega_ = 0;
}
inline double ControlType::omega() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.ControlType.omega)
  return omega_;
}
inline void ControlType::set_omega(double value) {
  
  omega_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.ControlType.omega)
}

// -------------------------------------------------------------------

// PointType

// double x = 1;
inline void PointType::clear_x() {
  x_ = 0;
}
inline double PointType::x() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.PointType.x)
  return x_;
}
inline void PointType::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.PointType.x)
}

// double y = 2;
inline void PointType::clear_y() {
  y_ = 0;
}
inline double PointType::y() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.PointType.y)
  return y_;
}
inline void PointType::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.PointType.y)
}

// -------------------------------------------------------------------

// TrackingData

// .willand_ackermann_proto.ParamMPC mpc_param = 1;
inline bool TrackingData::has_mpc_param() const {
  return this != internal_default_instance() && mpc_param_ != NULL;
}
inline void TrackingData::clear_mpc_param() {
  if (GetArenaNoVirtual() == NULL && mpc_param_ != NULL) {
    delete mpc_param_;
  }
  mpc_param_ = NULL;
}
inline const ::willand_ackermann_proto::ParamMPC& TrackingData::_internal_mpc_param() const {
  return *mpc_param_;
}
inline const ::willand_ackermann_proto::ParamMPC& TrackingData::mpc_param() const {
  const ::willand_ackermann_proto::ParamMPC* p = mpc_param_;
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.mpc_param)
  return p != NULL ? *p : *reinterpret_cast<const ::willand_ackermann_proto::ParamMPC*>(
      &::willand_ackermann_proto::_ParamMPC_default_instance_);
}
inline ::willand_ackermann_proto::ParamMPC* TrackingData::release_mpc_param() {
  // @@protoc_insertion_point(field_release:willand_ackermann_proto.TrackingData.mpc_param)
  
  ::willand_ackermann_proto::ParamMPC* temp = mpc_param_;
  mpc_param_ = NULL;
  return temp;
}
inline ::willand_ackermann_proto::ParamMPC* TrackingData::mutable_mpc_param() {
  
  if (mpc_param_ == NULL) {
    auto* p = CreateMaybeMessage<::willand_ackermann_proto::ParamMPC>(GetArenaNoVirtual());
    mpc_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.mpc_param)
  return mpc_param_;
}
inline void TrackingData::set_allocated_mpc_param(::willand_ackermann_proto::ParamMPC* mpc_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mpc_param_;
  }
  if (mpc_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mpc_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mpc_param, submessage_arena);
    }
    
  } else {
    
  }
  mpc_param_ = mpc_param;
  // @@protoc_insertion_point(field_set_allocated:willand_ackermann_proto.TrackingData.mpc_param)
}

// uint32 length = 2;
inline void TrackingData::clear_length() {
  length_ = 0u;
}
inline ::google::protobuf::uint32 TrackingData::length() const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.length)
  return length_;
}
inline void TrackingData::set_length(::google::protobuf::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.TrackingData.length)
}

// repeated uint32 timestamp = 3;
inline int TrackingData::timestamp_size() const {
  return timestamp_.size();
}
inline void TrackingData::clear_timestamp() {
  timestamp_.Clear();
}
inline ::google::protobuf::uint32 TrackingData::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.timestamp)
  return timestamp_.Get(index);
}
inline void TrackingData::set_timestamp(int index, ::google::protobuf::uint32 value) {
  timestamp_.Set(index, value);
  // @@protoc_insertion_point(field_set:willand_ackermann_proto.TrackingData.timestamp)
}
inline void TrackingData::add_timestamp(::google::protobuf::uint32 value) {
  timestamp_.Add(value);
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.timestamp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TrackingData::timestamp() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.timestamp)
  return timestamp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TrackingData::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.timestamp)
  return &timestamp_;
}

// repeated .willand_ackermann_proto.StateType refer_state = 4;
inline int TrackingData::refer_state_size() const {
  return refer_state_.size();
}
inline void TrackingData::clear_refer_state() {
  refer_state_.Clear();
}
inline ::willand_ackermann_proto::StateType* TrackingData::mutable_refer_state(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.refer_state)
  return refer_state_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType >*
TrackingData::mutable_refer_state() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.refer_state)
  return &refer_state_;
}
inline const ::willand_ackermann_proto::StateType& TrackingData::refer_state(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.refer_state)
  return refer_state_.Get(index);
}
inline ::willand_ackermann_proto::StateType* TrackingData::add_refer_state() {
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.refer_state)
  return refer_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType >&
TrackingData::refer_state() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.refer_state)
  return refer_state_;
}

// repeated .willand_ackermann_proto.StateType actual_state = 5;
inline int TrackingData::actual_state_size() const {
  return actual_state_.size();
}
inline void TrackingData::clear_actual_state() {
  actual_state_.Clear();
}
inline ::willand_ackermann_proto::StateType* TrackingData::mutable_actual_state(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.actual_state)
  return actual_state_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType >*
TrackingData::mutable_actual_state() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.actual_state)
  return &actual_state_;
}
inline const ::willand_ackermann_proto::StateType& TrackingData::actual_state(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.actual_state)
  return actual_state_.Get(index);
}
inline ::willand_ackermann_proto::StateType* TrackingData::add_actual_state() {
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.actual_state)
  return actual_state_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::StateType >&
TrackingData::actual_state() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.actual_state)
  return actual_state_;
}

// repeated .willand_ackermann_proto.ControlType ctrl_cmd = 6;
inline int TrackingData::ctrl_cmd_size() const {
  return ctrl_cmd_.size();
}
inline void TrackingData::clear_ctrl_cmd() {
  ctrl_cmd_.Clear();
}
inline ::willand_ackermann_proto::ControlType* TrackingData::mutable_ctrl_cmd(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.ctrl_cmd)
  return ctrl_cmd_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlType >*
TrackingData::mutable_ctrl_cmd() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.ctrl_cmd)
  return &ctrl_cmd_;
}
inline const ::willand_ackermann_proto::ControlType& TrackingData::ctrl_cmd(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.ctrl_cmd)
  return ctrl_cmd_.Get(index);
}
inline ::willand_ackermann_proto::ControlType* TrackingData::add_ctrl_cmd() {
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.ctrl_cmd)
  return ctrl_cmd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::ControlType >&
TrackingData::ctrl_cmd() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.ctrl_cmd)
  return ctrl_cmd_;
}

// repeated .willand_ackermann_proto.PointType global_point = 7;
inline int TrackingData::global_point_size() const {
  return global_point_.size();
}
inline void TrackingData::clear_global_point() {
  global_point_.Clear();
}
inline ::willand_ackermann_proto::PointType* TrackingData::mutable_global_point(int index) {
  // @@protoc_insertion_point(field_mutable:willand_ackermann_proto.TrackingData.global_point)
  return global_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::PointType >*
TrackingData::mutable_global_point() {
  // @@protoc_insertion_point(field_mutable_list:willand_ackermann_proto.TrackingData.global_point)
  return &global_point_;
}
inline const ::willand_ackermann_proto::PointType& TrackingData::global_point(int index) const {
  // @@protoc_insertion_point(field_get:willand_ackermann_proto.TrackingData.global_point)
  return global_point_.Get(index);
}
inline ::willand_ackermann_proto::PointType* TrackingData::add_global_point() {
  // @@protoc_insertion_point(field_add:willand_ackermann_proto.TrackingData.global_point)
  return global_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::willand_ackermann_proto::PointType >&
TrackingData::global_point() const {
  // @@protoc_insertion_point(field_list:willand_ackermann_proto.TrackingData.global_point)
  return global_point_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace willand_ackermann_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tracking_5fdata_2eproto
